// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	flavors "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/flavors"
	remoteconsoles "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/remoteconsoles"
	servergroups "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/servergroups"
	servers "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/servers"
	floatingips "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/layer3/floatingips"
	routers "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/layer3/routers"
	groups "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/security/groups"
	rules "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/security/rules"
	networks "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/networks"
	ports "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/ports"
	subnets "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/subnets"
	v1alpha1 "github.com/unikorn-cloud/region/pkg/apis/unikorn/v1alpha1"
	openstack "github.com/unikorn-cloud/region/pkg/providers/openstack"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalNetworkInterfsce is a mock of ExternalNetworkInterfsce interface.
type MockExternalNetworkInterfsce struct {
	ctrl     *gomock.Controller
	recorder *MockExternalNetworkInterfsceMockRecorder
}

// MockExternalNetworkInterfsceMockRecorder is the mock recorder for MockExternalNetworkInterfsce.
type MockExternalNetworkInterfsceMockRecorder struct {
	mock *MockExternalNetworkInterfsce
}

// NewMockExternalNetworkInterfsce creates a new mock instance.
func NewMockExternalNetworkInterfsce(ctrl *gomock.Controller) *MockExternalNetworkInterfsce {
	mock := &MockExternalNetworkInterfsce{ctrl: ctrl}
	mock.recorder = &MockExternalNetworkInterfsceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalNetworkInterfsce) EXPECT() *MockExternalNetworkInterfsceMockRecorder {
	return m.recorder
}

// ExternalNetworks mocks base method.
func (m *MockExternalNetworkInterfsce) ExternalNetworks(ctx context.Context) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalNetworks", ctx)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalNetworks indicates an expected call of ExternalNetworks.
func (mr *MockExternalNetworkInterfsceMockRecorder) ExternalNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalNetworks", reflect.TypeOf((*MockExternalNetworkInterfsce)(nil).ExternalNetworks), ctx)
}

// MockNetworkInterface is a mock of NetworkInterface interface.
type MockNetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkInterfaceMockRecorder
}

// MockNetworkInterfaceMockRecorder is the mock recorder for MockNetworkInterface.
type MockNetworkInterfaceMockRecorder struct {
	mock *MockNetworkInterface
}

// NewMockNetworkInterface creates a new mock instance.
func NewMockNetworkInterface(ctrl *gomock.Controller) *MockNetworkInterface {
	mock := &MockNetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkInterface) EXPECT() *MockNetworkInterfaceMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockNetworkInterface) CreateNetwork(ctx context.Context, network *v1alpha1.Network, vlanID *int) (*openstack.NetworkExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, network, vlanID)
	ret0, _ := ret[0].(*openstack.NetworkExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNetworkInterfaceMockRecorder) CreateNetwork(ctx, network, vlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworkInterface)(nil).CreateNetwork), ctx, network, vlanID)
}

// DeleteNetwork mocks base method.
func (m *MockNetworkInterface) DeleteNetwork(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkInterfaceMockRecorder) DeleteNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworkInterface)(nil).DeleteNetwork), ctx, id)
}

// GetNetwork mocks base method.
func (m *MockNetworkInterface) GetNetwork(ctx context.Context, network *v1alpha1.Network) (*openstack.NetworkExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, network)
	ret0, _ := ret[0].(*openstack.NetworkExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockNetworkInterfaceMockRecorder) GetNetwork(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkInterface)(nil).GetNetwork), ctx, network)
}

// MockSubnetInterface is a mock of SubnetInterface interface.
type MockSubnetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetInterfaceMockRecorder
}

// MockSubnetInterfaceMockRecorder is the mock recorder for MockSubnetInterface.
type MockSubnetInterfaceMockRecorder struct {
	mock *MockSubnetInterface
}

// NewMockSubnetInterface creates a new mock instance.
func NewMockSubnetInterface(ctrl *gomock.Controller) *MockSubnetInterface {
	mock := &MockSubnetInterface{ctrl: ctrl}
	mock.recorder = &MockSubnetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetInterface) EXPECT() *MockSubnetInterfaceMockRecorder {
	return m.recorder
}

// CreateSubnet mocks base method.
func (m *MockSubnetInterface) CreateSubnet(ctx context.Context, network *v1alpha1.Network, networkID, prefix, gatewayID string, dnsNameservers []string, allocationPools []subnets.AllocationPool) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockSubnetInterfaceMockRecorder) CreateSubnet(ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockSubnetInterface)(nil).CreateSubnet), ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools)
}

// DeleteSubnet mocks base method.
func (m *MockSubnetInterface) DeleteSubnet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockSubnetInterfaceMockRecorder) DeleteSubnet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockSubnetInterface)(nil).DeleteSubnet), ctx, id)
}

// GetSubnet mocks base method.
func (m *MockSubnetInterface) GetSubnet(ctx context.Context, network *v1alpha1.Network) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, network)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockSubnetInterfaceMockRecorder) GetSubnet(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockSubnetInterface)(nil).GetSubnet), ctx, network)
}

// MockRouterInterface is a mock of RouterInterface interface.
type MockRouterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouterInterfaceMockRecorder
}

// MockRouterInterfaceMockRecorder is the mock recorder for MockRouterInterface.
type MockRouterInterfaceMockRecorder struct {
	mock *MockRouterInterface
}

// NewMockRouterInterface creates a new mock instance.
func NewMockRouterInterface(ctrl *gomock.Controller) *MockRouterInterface {
	mock := &MockRouterInterface{ctrl: ctrl}
	mock.recorder = &MockRouterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterInterface) EXPECT() *MockRouterInterfaceMockRecorder {
	return m.recorder
}

// AddRouterInterface mocks base method.
func (m *MockRouterInterface) AddRouterInterface(ctx context.Context, routerID, subnetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouterInterface", ctx, routerID, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouterInterface indicates an expected call of AddRouterInterface.
func (mr *MockRouterInterfaceMockRecorder) AddRouterInterface(ctx, routerID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouterInterface", reflect.TypeOf((*MockRouterInterface)(nil).AddRouterInterface), ctx, routerID, subnetID)
}

// CreateRouter mocks base method.
func (m *MockRouterInterface) CreateRouter(ctx context.Context, network *v1alpha1.Network) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", ctx, network)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockRouterInterfaceMockRecorder) CreateRouter(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockRouterInterface)(nil).CreateRouter), ctx, network)
}

// DeleteRouter mocks base method.
func (m *MockRouterInterface) DeleteRouter(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockRouterInterfaceMockRecorder) DeleteRouter(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockRouterInterface)(nil).DeleteRouter), ctx, id)
}

// GetRouter mocks base method.
func (m *MockRouterInterface) GetRouter(ctx context.Context, network *v1alpha1.Network) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter", ctx, network)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockRouterInterfaceMockRecorder) GetRouter(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockRouterInterface)(nil).GetRouter), ctx, network)
}

// RemoveRouterInterface mocks base method.
func (m *MockRouterInterface) RemoveRouterInterface(ctx context.Context, routerID, subnetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRouterInterface", ctx, routerID, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRouterInterface indicates an expected call of RemoveRouterInterface.
func (mr *MockRouterInterfaceMockRecorder) RemoveRouterInterface(ctx, routerID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRouterInterface", reflect.TypeOf((*MockRouterInterface)(nil).RemoveRouterInterface), ctx, routerID, subnetID)
}

// MockSecurityGroupInterface is a mock of SecurityGroupInterface interface.
type MockSecurityGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupInterfaceMockRecorder
}

// MockSecurityGroupInterfaceMockRecorder is the mock recorder for MockSecurityGroupInterface.
type MockSecurityGroupInterfaceMockRecorder struct {
	mock *MockSecurityGroupInterface
}

// NewMockSecurityGroupInterface creates a new mock instance.
func NewMockSecurityGroupInterface(ctrl *gomock.Controller) *MockSecurityGroupInterface {
	mock := &MockSecurityGroupInterface{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupInterface) EXPECT() *MockSecurityGroupInterfaceMockRecorder {
	return m.recorder
}

// CreateSecurityGroup mocks base method.
func (m *MockSecurityGroupInterface) CreateSecurityGroup(ctx context.Context, securityGroup *v1alpha1.SecurityGroup) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, securityGroup)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockSecurityGroupInterfaceMockRecorder) CreateSecurityGroup(ctx, securityGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockSecurityGroupInterface)(nil).CreateSecurityGroup), ctx, securityGroup)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockSecurityGroupInterface) CreateSecurityGroupRule(ctx context.Context, securityGroupID string, direction rules.RuleDirection, protocol rules.RuleProtocol, portStart, portEnd int, prefix string) (*rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix)
	ret0, _ := ret[0].(*rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockSecurityGroupInterfaceMockRecorder) CreateSecurityGroupRule(ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockSecurityGroupInterface)(nil).CreateSecurityGroupRule), ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix)
}

// DeleteSecurityGroup mocks base method.
func (m *MockSecurityGroupInterface) DeleteSecurityGroup(ctx context.Context, securityGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, securityGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockSecurityGroupInterfaceMockRecorder) DeleteSecurityGroup(ctx, securityGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockSecurityGroupInterface)(nil).DeleteSecurityGroup), ctx, securityGroupID)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockSecurityGroupInterface) DeleteSecurityGroupRule(ctx context.Context, securityGroupID, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", ctx, securityGroupID, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockSecurityGroupInterfaceMockRecorder) DeleteSecurityGroupRule(ctx, securityGroupID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockSecurityGroupInterface)(nil).DeleteSecurityGroupRule), ctx, securityGroupID, ruleID)
}

// GetSecurityGroup mocks base method.
func (m *MockSecurityGroupInterface) GetSecurityGroup(ctx context.Context, securityGroup *v1alpha1.SecurityGroup) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", ctx, securityGroup)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockSecurityGroupInterfaceMockRecorder) GetSecurityGroup(ctx, securityGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockSecurityGroupInterface)(nil).GetSecurityGroup), ctx, securityGroup)
}

// ListSecurityGroupRules mocks base method.
func (m *MockSecurityGroupInterface) ListSecurityGroupRules(ctx context.Context, securityGroupID string) ([]rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRules", ctx, securityGroupID)
	ret0, _ := ret[0].([]rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRules indicates an expected call of ListSecurityGroupRules.
func (mr *MockSecurityGroupInterfaceMockRecorder) ListSecurityGroupRules(ctx, securityGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRules", reflect.TypeOf((*MockSecurityGroupInterface)(nil).ListSecurityGroupRules), ctx, securityGroupID)
}

// MockFloatingIPInterface is a mock of FloatingIPInterface interface.
type MockFloatingIPInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFloatingIPInterfaceMockRecorder
}

// MockFloatingIPInterfaceMockRecorder is the mock recorder for MockFloatingIPInterface.
type MockFloatingIPInterfaceMockRecorder struct {
	mock *MockFloatingIPInterface
}

// NewMockFloatingIPInterface creates a new mock instance.
func NewMockFloatingIPInterface(ctrl *gomock.Controller) *MockFloatingIPInterface {
	mock := &MockFloatingIPInterface{ctrl: ctrl}
	mock.recorder = &MockFloatingIPInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloatingIPInterface) EXPECT() *MockFloatingIPInterfaceMockRecorder {
	return m.recorder
}

// CreateFloatingIP mocks base method.
func (m *MockFloatingIPInterface) CreateFloatingIP(ctx context.Context, portID string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", ctx, portID)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP.
func (mr *MockFloatingIPInterfaceMockRecorder) CreateFloatingIP(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockFloatingIPInterface)(nil).CreateFloatingIP), ctx, portID)
}

// DeleteFloatingIP mocks base method.
func (m *MockFloatingIPInterface) DeleteFloatingIP(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP.
func (mr *MockFloatingIPInterfaceMockRecorder) DeleteFloatingIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockFloatingIPInterface)(nil).DeleteFloatingIP), ctx, id)
}

// GetFloatingIP mocks base method.
func (m *MockFloatingIPInterface) GetFloatingIP(ctx context.Context, portID string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIP", ctx, portID)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIP indicates an expected call of GetFloatingIP.
func (mr *MockFloatingIPInterfaceMockRecorder) GetFloatingIP(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIP", reflect.TypeOf((*MockFloatingIPInterface)(nil).GetFloatingIP), ctx, portID)
}

// MockPortInterface is a mock of PortInterface interface.
type MockPortInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPortInterfaceMockRecorder
}

// MockPortInterfaceMockRecorder is the mock recorder for MockPortInterface.
type MockPortInterfaceMockRecorder struct {
	mock *MockPortInterface
}

// NewMockPortInterface creates a new mock instance.
func NewMockPortInterface(ctrl *gomock.Controller) *MockPortInterface {
	mock := &MockPortInterface{ctrl: ctrl}
	mock.recorder = &MockPortInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortInterface) EXPECT() *MockPortInterfaceMockRecorder {
	return m.recorder
}

// CreateServerPort mocks base method.
func (m *MockPortInterface) CreateServerPort(ctx context.Context, server *v1alpha1.Server, networkID string, securityGroupIDs []string, allowedAddressPairs []ports.AddressPair) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerPort", ctx, server, networkID, securityGroupIDs, allowedAddressPairs)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerPort indicates an expected call of CreateServerPort.
func (mr *MockPortInterfaceMockRecorder) CreateServerPort(ctx, server, networkID, securityGroupIDs, allowedAddressPairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerPort", reflect.TypeOf((*MockPortInterface)(nil).CreateServerPort), ctx, server, networkID, securityGroupIDs, allowedAddressPairs)
}

// DeletePort mocks base method.
func (m *MockPortInterface) DeletePort(ctx context.Context, portID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePort", ctx, portID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePort indicates an expected call of DeletePort.
func (mr *MockPortInterfaceMockRecorder) DeletePort(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePort", reflect.TypeOf((*MockPortInterface)(nil).DeletePort), ctx, portID)
}

// GetServerPort mocks base method.
func (m *MockPortInterface) GetServerPort(ctx context.Context, server *v1alpha1.Server) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort", ctx, server)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerPort indicates an expected call of GetServerPort.
func (mr *MockPortInterfaceMockRecorder) GetServerPort(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockPortInterface)(nil).GetServerPort), ctx, server)
}

// ListRouterPorts mocks base method.
func (m *MockPortInterface) ListRouterPorts(ctx context.Context, routerID string) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouterPorts", ctx, routerID)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouterPorts indicates an expected call of ListRouterPorts.
func (mr *MockPortInterfaceMockRecorder) ListRouterPorts(ctx, routerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouterPorts", reflect.TypeOf((*MockPortInterface)(nil).ListRouterPorts), ctx, routerID)
}

// ListServerPorts mocks base method.
func (m *MockPortInterface) ListServerPorts(ctx context.Context, serverID string) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerPorts", ctx, serverID)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerPorts indicates an expected call of ListServerPorts.
func (mr *MockPortInterfaceMockRecorder) ListServerPorts(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerPorts", reflect.TypeOf((*MockPortInterface)(nil).ListServerPorts), ctx, serverID)
}

// UpdatePort mocks base method.
func (m *MockPortInterface) UpdatePort(ctx context.Context, portID string, securityGroupIDs []string, allowedAddressPairs []ports.AddressPair) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", ctx, portID, securityGroupIDs, allowedAddressPairs)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockPortInterfaceMockRecorder) UpdatePort(ctx, portID, securityGroupIDs, allowedAddressPairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockPortInterface)(nil).UpdatePort), ctx, portID, securityGroupIDs, allowedAddressPairs)
}

// MockNetworkingInterface is a mock of NetworkingInterface interface.
type MockNetworkingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingInterfaceMockRecorder
}

// MockNetworkingInterfaceMockRecorder is the mock recorder for MockNetworkingInterface.
type MockNetworkingInterfaceMockRecorder struct {
	mock *MockNetworkingInterface
}

// NewMockNetworkingInterface creates a new mock instance.
func NewMockNetworkingInterface(ctrl *gomock.Controller) *MockNetworkingInterface {
	mock := &MockNetworkingInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingInterface) EXPECT() *MockNetworkingInterfaceMockRecorder {
	return m.recorder
}

// AddRouterInterface mocks base method.
func (m *MockNetworkingInterface) AddRouterInterface(ctx context.Context, routerID, subnetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouterInterface", ctx, routerID, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouterInterface indicates an expected call of AddRouterInterface.
func (mr *MockNetworkingInterfaceMockRecorder) AddRouterInterface(ctx, routerID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouterInterface", reflect.TypeOf((*MockNetworkingInterface)(nil).AddRouterInterface), ctx, routerID, subnetID)
}

// CreateFloatingIP mocks base method.
func (m *MockNetworkingInterface) CreateFloatingIP(ctx context.Context, portID string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", ctx, portID)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP.
func (mr *MockNetworkingInterfaceMockRecorder) CreateFloatingIP(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateFloatingIP), ctx, portID)
}

// CreateNetwork mocks base method.
func (m *MockNetworkingInterface) CreateNetwork(ctx context.Context, network *v1alpha1.Network, vlanID *int) (*openstack.NetworkExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, network, vlanID)
	ret0, _ := ret[0].(*openstack.NetworkExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNetworkingInterfaceMockRecorder) CreateNetwork(ctx, network, vlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateNetwork), ctx, network, vlanID)
}

// CreateRouter mocks base method.
func (m *MockNetworkingInterface) CreateRouter(ctx context.Context, network *v1alpha1.Network) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", ctx, network)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockNetworkingInterfaceMockRecorder) CreateRouter(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateRouter), ctx, network)
}

// CreateSecurityGroup mocks base method.
func (m *MockNetworkingInterface) CreateSecurityGroup(ctx context.Context, securityGroup *v1alpha1.SecurityGroup) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, securityGroup)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockNetworkingInterfaceMockRecorder) CreateSecurityGroup(ctx, securityGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateSecurityGroup), ctx, securityGroup)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockNetworkingInterface) CreateSecurityGroupRule(ctx context.Context, securityGroupID string, direction rules.RuleDirection, protocol rules.RuleProtocol, portStart, portEnd int, prefix string) (*rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix)
	ret0, _ := ret[0].(*rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockNetworkingInterfaceMockRecorder) CreateSecurityGroupRule(ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateSecurityGroupRule), ctx, securityGroupID, direction, protocol, portStart, portEnd, prefix)
}

// CreateServerPort mocks base method.
func (m *MockNetworkingInterface) CreateServerPort(ctx context.Context, server *v1alpha1.Server, networkID string, securityGroupIDs []string, allowedAddressPairs []ports.AddressPair) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerPort", ctx, server, networkID, securityGroupIDs, allowedAddressPairs)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerPort indicates an expected call of CreateServerPort.
func (mr *MockNetworkingInterfaceMockRecorder) CreateServerPort(ctx, server, networkID, securityGroupIDs, allowedAddressPairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerPort", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateServerPort), ctx, server, networkID, securityGroupIDs, allowedAddressPairs)
}

// CreateSubnet mocks base method.
func (m *MockNetworkingInterface) CreateSubnet(ctx context.Context, network *v1alpha1.Network, networkID, prefix, gatewayID string, dnsNameservers []string, allocationPools []subnets.AllocationPool) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockNetworkingInterfaceMockRecorder) CreateSubnet(ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockNetworkingInterface)(nil).CreateSubnet), ctx, network, networkID, prefix, gatewayID, dnsNameservers, allocationPools)
}

// DeleteFloatingIP mocks base method.
func (m *MockNetworkingInterface) DeleteFloatingIP(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteFloatingIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteFloatingIP), ctx, id)
}

// DeleteNetwork mocks base method.
func (m *MockNetworkingInterface) DeleteNetwork(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteNetwork), ctx, id)
}

// DeletePort mocks base method.
func (m *MockNetworkingInterface) DeletePort(ctx context.Context, portID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePort", ctx, portID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePort indicates an expected call of DeletePort.
func (mr *MockNetworkingInterfaceMockRecorder) DeletePort(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePort", reflect.TypeOf((*MockNetworkingInterface)(nil).DeletePort), ctx, portID)
}

// DeleteRouter mocks base method.
func (m *MockNetworkingInterface) DeleteRouter(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteRouter(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteRouter), ctx, id)
}

// DeleteSecurityGroup mocks base method.
func (m *MockNetworkingInterface) DeleteSecurityGroup(ctx context.Context, securityGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, securityGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteSecurityGroup(ctx, securityGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteSecurityGroup), ctx, securityGroupID)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockNetworkingInterface) DeleteSecurityGroupRule(ctx context.Context, securityGroupID, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", ctx, securityGroupID, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteSecurityGroupRule(ctx, securityGroupID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteSecurityGroupRule), ctx, securityGroupID, ruleID)
}

// DeleteSubnet mocks base method.
func (m *MockNetworkingInterface) DeleteSubnet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockNetworkingInterfaceMockRecorder) DeleteSubnet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockNetworkingInterface)(nil).DeleteSubnet), ctx, id)
}

// ExternalNetworks mocks base method.
func (m *MockNetworkingInterface) ExternalNetworks(ctx context.Context) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalNetworks", ctx)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalNetworks indicates an expected call of ExternalNetworks.
func (mr *MockNetworkingInterfaceMockRecorder) ExternalNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalNetworks", reflect.TypeOf((*MockNetworkingInterface)(nil).ExternalNetworks), ctx)
}

// GetFloatingIP mocks base method.
func (m *MockNetworkingInterface) GetFloatingIP(ctx context.Context, portID string) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIP", ctx, portID)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIP indicates an expected call of GetFloatingIP.
func (mr *MockNetworkingInterfaceMockRecorder) GetFloatingIP(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIP", reflect.TypeOf((*MockNetworkingInterface)(nil).GetFloatingIP), ctx, portID)
}

// GetNetwork mocks base method.
func (m *MockNetworkingInterface) GetNetwork(ctx context.Context, network *v1alpha1.Network) (*openstack.NetworkExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, network)
	ret0, _ := ret[0].(*openstack.NetworkExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockNetworkingInterfaceMockRecorder) GetNetwork(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkingInterface)(nil).GetNetwork), ctx, network)
}

// GetRouter mocks base method.
func (m *MockNetworkingInterface) GetRouter(ctx context.Context, network *v1alpha1.Network) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter", ctx, network)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockNetworkingInterfaceMockRecorder) GetRouter(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockNetworkingInterface)(nil).GetRouter), ctx, network)
}

// GetSecurityGroup mocks base method.
func (m *MockNetworkingInterface) GetSecurityGroup(ctx context.Context, securityGroup *v1alpha1.SecurityGroup) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", ctx, securityGroup)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockNetworkingInterfaceMockRecorder) GetSecurityGroup(ctx, securityGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockNetworkingInterface)(nil).GetSecurityGroup), ctx, securityGroup)
}

// GetServerPort mocks base method.
func (m *MockNetworkingInterface) GetServerPort(ctx context.Context, server *v1alpha1.Server) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort", ctx, server)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerPort indicates an expected call of GetServerPort.
func (mr *MockNetworkingInterfaceMockRecorder) GetServerPort(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockNetworkingInterface)(nil).GetServerPort), ctx, server)
}

// GetSubnet mocks base method.
func (m *MockNetworkingInterface) GetSubnet(ctx context.Context, network *v1alpha1.Network) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, network)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockNetworkingInterfaceMockRecorder) GetSubnet(ctx, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockNetworkingInterface)(nil).GetSubnet), ctx, network)
}

// ListRouterPorts mocks base method.
func (m *MockNetworkingInterface) ListRouterPorts(ctx context.Context, routerID string) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouterPorts", ctx, routerID)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouterPorts indicates an expected call of ListRouterPorts.
func (mr *MockNetworkingInterfaceMockRecorder) ListRouterPorts(ctx, routerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouterPorts", reflect.TypeOf((*MockNetworkingInterface)(nil).ListRouterPorts), ctx, routerID)
}

// ListSecurityGroupRules mocks base method.
func (m *MockNetworkingInterface) ListSecurityGroupRules(ctx context.Context, securityGroupID string) ([]rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRules", ctx, securityGroupID)
	ret0, _ := ret[0].([]rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRules indicates an expected call of ListSecurityGroupRules.
func (mr *MockNetworkingInterfaceMockRecorder) ListSecurityGroupRules(ctx, securityGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRules", reflect.TypeOf((*MockNetworkingInterface)(nil).ListSecurityGroupRules), ctx, securityGroupID)
}

// ListServerPorts mocks base method.
func (m *MockNetworkingInterface) ListServerPorts(ctx context.Context, serverID string) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerPorts", ctx, serverID)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerPorts indicates an expected call of ListServerPorts.
func (mr *MockNetworkingInterfaceMockRecorder) ListServerPorts(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerPorts", reflect.TypeOf((*MockNetworkingInterface)(nil).ListServerPorts), ctx, serverID)
}

// RemoveRouterInterface mocks base method.
func (m *MockNetworkingInterface) RemoveRouterInterface(ctx context.Context, routerID, subnetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRouterInterface", ctx, routerID, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRouterInterface indicates an expected call of RemoveRouterInterface.
func (mr *MockNetworkingInterfaceMockRecorder) RemoveRouterInterface(ctx, routerID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRouterInterface", reflect.TypeOf((*MockNetworkingInterface)(nil).RemoveRouterInterface), ctx, routerID, subnetID)
}

// UpdatePort mocks base method.
func (m *MockNetworkingInterface) UpdatePort(ctx context.Context, portID string, securityGroupIDs []string, allowedAddressPairs []ports.AddressPair) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", ctx, portID, securityGroupIDs, allowedAddressPairs)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePort indicates an expected call of UpdatePort.
func (mr *MockNetworkingInterfaceMockRecorder) UpdatePort(ctx, portID, securityGroupIDs, allowedAddressPairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockNetworkingInterface)(nil).UpdatePort), ctx, portID, securityGroupIDs, allowedAddressPairs)
}

// MockKeypairInterface is a mock of KeypairInterface interface.
type MockKeypairInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKeypairInterfaceMockRecorder
}

// MockKeypairInterfaceMockRecorder is the mock recorder for MockKeypairInterface.
type MockKeypairInterfaceMockRecorder struct {
	mock *MockKeypairInterface
}

// NewMockKeypairInterface creates a new mock instance.
func NewMockKeypairInterface(ctrl *gomock.Controller) *MockKeypairInterface {
	mock := &MockKeypairInterface{ctrl: ctrl}
	mock.recorder = &MockKeypairInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeypairInterface) EXPECT() *MockKeypairInterfaceMockRecorder {
	return m.recorder
}

// CreateKeypair mocks base method.
func (m *MockKeypairInterface) CreateKeypair(ctx context.Context, name, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeypair", ctx, name, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeypair indicates an expected call of CreateKeypair.
func (mr *MockKeypairInterfaceMockRecorder) CreateKeypair(ctx, name, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeypair", reflect.TypeOf((*MockKeypairInterface)(nil).CreateKeypair), ctx, name, publicKey)
}

// DeleteKeypair mocks base method.
func (m *MockKeypairInterface) DeleteKeypair(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeypair", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeypair indicates an expected call of DeleteKeypair.
func (mr *MockKeypairInterfaceMockRecorder) DeleteKeypair(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeypair", reflect.TypeOf((*MockKeypairInterface)(nil).DeleteKeypair), ctx, name)
}

// MockFlavorInterface is a mock of FlavorInterface interface.
type MockFlavorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlavorInterfaceMockRecorder
}

// MockFlavorInterfaceMockRecorder is the mock recorder for MockFlavorInterface.
type MockFlavorInterfaceMockRecorder struct {
	mock *MockFlavorInterface
}

// NewMockFlavorInterface creates a new mock instance.
func NewMockFlavorInterface(ctrl *gomock.Controller) *MockFlavorInterface {
	mock := &MockFlavorInterface{ctrl: ctrl}
	mock.recorder = &MockFlavorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlavorInterface) EXPECT() *MockFlavorInterfaceMockRecorder {
	return m.recorder
}

// GetFlavors mocks base method.
func (m *MockFlavorInterface) GetFlavors(ctx context.Context) ([]flavors.Flavor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavors", ctx)
	ret0, _ := ret[0].([]flavors.Flavor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavors indicates an expected call of GetFlavors.
func (mr *MockFlavorInterfaceMockRecorder) GetFlavors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavors", reflect.TypeOf((*MockFlavorInterface)(nil).GetFlavors), ctx)
}

// MockServerGroupInterface is a mock of ServerGroupInterface interface.
type MockServerGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerGroupInterfaceMockRecorder
}

// MockServerGroupInterfaceMockRecorder is the mock recorder for MockServerGroupInterface.
type MockServerGroupInterfaceMockRecorder struct {
	mock *MockServerGroupInterface
}

// NewMockServerGroupInterface creates a new mock instance.
func NewMockServerGroupInterface(ctrl *gomock.Controller) *MockServerGroupInterface {
	mock := &MockServerGroupInterface{ctrl: ctrl}
	mock.recorder = &MockServerGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerGroupInterface) EXPECT() *MockServerGroupInterfaceMockRecorder {
	return m.recorder
}

// CreateServerGroup mocks base method.
func (m *MockServerGroupInterface) CreateServerGroup(ctx context.Context, name string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerGroup", ctx, name)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerGroup indicates an expected call of CreateServerGroup.
func (mr *MockServerGroupInterfaceMockRecorder) CreateServerGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerGroup", reflect.TypeOf((*MockServerGroupInterface)(nil).CreateServerGroup), ctx, name)
}

// DeleteServerGroup mocks base method.
func (m *MockServerGroupInterface) DeleteServerGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerGroup indicates an expected call of DeleteServerGroup.
func (mr *MockServerGroupInterfaceMockRecorder) DeleteServerGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerGroup", reflect.TypeOf((*MockServerGroupInterface)(nil).DeleteServerGroup), ctx, id)
}

// MockComputeQuotaInterface is a mock of ComputeQuotaInterface interface.
type MockComputeQuotaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComputeQuotaInterfaceMockRecorder
}

// MockComputeQuotaInterfaceMockRecorder is the mock recorder for MockComputeQuotaInterface.
type MockComputeQuotaInterfaceMockRecorder struct {
	mock *MockComputeQuotaInterface
}

// NewMockComputeQuotaInterface creates a new mock instance.
func NewMockComputeQuotaInterface(ctrl *gomock.Controller) *MockComputeQuotaInterface {
	mock := &MockComputeQuotaInterface{ctrl: ctrl}
	mock.recorder = &MockComputeQuotaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeQuotaInterface) EXPECT() *MockComputeQuotaInterfaceMockRecorder {
	return m.recorder
}

// UpdateQuotas mocks base method.
func (m *MockComputeQuotaInterface) UpdateQuotas(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotas", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuotas indicates an expected call of UpdateQuotas.
func (mr *MockComputeQuotaInterfaceMockRecorder) UpdateQuotas(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotas", reflect.TypeOf((*MockComputeQuotaInterface)(nil).UpdateQuotas), ctx, projectID)
}

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// CreateRemoteConsole mocks base method.
func (m *MockServerInterface) CreateRemoteConsole(ctx context.Context, id string) (*remoteconsoles.RemoteConsole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteConsole", ctx, id)
	ret0, _ := ret[0].(*remoteconsoles.RemoteConsole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteConsole indicates an expected call of CreateRemoteConsole.
func (mr *MockServerInterfaceMockRecorder) CreateRemoteConsole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteConsole", reflect.TypeOf((*MockServerInterface)(nil).CreateRemoteConsole), ctx, id)
}

// CreateServer mocks base method.
func (m *MockServerInterface) CreateServer(ctx context.Context, server *v1alpha1.Server, keyName string, networks []servers.Network, serverGroupID *string, metadata map[string]string) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server, keyName, networks, serverGroupID, metadata)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerInterfaceMockRecorder) CreateServer(ctx, server, keyName, networks, serverGroupID, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerInterface)(nil).CreateServer), ctx, server, keyName, networks, serverGroupID, metadata)
}

// DeleteServer mocks base method.
func (m *MockServerInterface) DeleteServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockServerInterfaceMockRecorder) DeleteServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockServerInterface)(nil).DeleteServer), ctx, id)
}

// GetServer mocks base method.
func (m *MockServerInterface) GetServer(ctx context.Context, server *v1alpha1.Server) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, server)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockServerInterfaceMockRecorder) GetServer(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockServerInterface)(nil).GetServer), ctx, server)
}

// RebootServer mocks base method.
func (m *MockServerInterface) RebootServer(ctx context.Context, id string, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootServer", ctx, id, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootServer indicates an expected call of RebootServer.
func (mr *MockServerInterfaceMockRecorder) RebootServer(ctx, id, hard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootServer", reflect.TypeOf((*MockServerInterface)(nil).RebootServer), ctx, id, hard)
}

// ShowConsoleOutput mocks base method.
func (m *MockServerInterface) ShowConsoleOutput(ctx context.Context, id string, length *int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowConsoleOutput", ctx, id, length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowConsoleOutput indicates an expected call of ShowConsoleOutput.
func (mr *MockServerInterfaceMockRecorder) ShowConsoleOutput(ctx, id, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowConsoleOutput", reflect.TypeOf((*MockServerInterface)(nil).ShowConsoleOutput), ctx, id, length)
}

// StartServer mocks base method.
func (m *MockServerInterface) StartServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockServerInterfaceMockRecorder) StartServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockServerInterface)(nil).StartServer), ctx, id)
}

// StopServer mocks base method.
func (m *MockServerInterface) StopServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopServer indicates an expected call of StopServer.
func (mr *MockServerInterfaceMockRecorder) StopServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockServerInterface)(nil).StopServer), ctx, id)
}

// MockComputeInterface is a mock of ComputeInterface interface.
type MockComputeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInterfaceMockRecorder
}

// MockComputeInterfaceMockRecorder is the mock recorder for MockComputeInterface.
type MockComputeInterfaceMockRecorder struct {
	mock *MockComputeInterface
}

// NewMockComputeInterface creates a new mock instance.
func NewMockComputeInterface(ctrl *gomock.Controller) *MockComputeInterface {
	mock := &MockComputeInterface{ctrl: ctrl}
	mock.recorder = &MockComputeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInterface) EXPECT() *MockComputeInterfaceMockRecorder {
	return m.recorder
}

// CreateKeypair mocks base method.
func (m *MockComputeInterface) CreateKeypair(ctx context.Context, name, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeypair", ctx, name, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeypair indicates an expected call of CreateKeypair.
func (mr *MockComputeInterfaceMockRecorder) CreateKeypair(ctx, name, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeypair", reflect.TypeOf((*MockComputeInterface)(nil).CreateKeypair), ctx, name, publicKey)
}

// CreateRemoteConsole mocks base method.
func (m *MockComputeInterface) CreateRemoteConsole(ctx context.Context, id string) (*remoteconsoles.RemoteConsole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteConsole", ctx, id)
	ret0, _ := ret[0].(*remoteconsoles.RemoteConsole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteConsole indicates an expected call of CreateRemoteConsole.
func (mr *MockComputeInterfaceMockRecorder) CreateRemoteConsole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteConsole", reflect.TypeOf((*MockComputeInterface)(nil).CreateRemoteConsole), ctx, id)
}

// CreateServer mocks base method.
func (m *MockComputeInterface) CreateServer(ctx context.Context, server *v1alpha1.Server, keyName string, networks []servers.Network, serverGroupID *string, metadata map[string]string) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server, keyName, networks, serverGroupID, metadata)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockComputeInterfaceMockRecorder) CreateServer(ctx, server, keyName, networks, serverGroupID, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockComputeInterface)(nil).CreateServer), ctx, server, keyName, networks, serverGroupID, metadata)
}

// CreateServerGroup mocks base method.
func (m *MockComputeInterface) CreateServerGroup(ctx context.Context, name string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerGroup", ctx, name)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerGroup indicates an expected call of CreateServerGroup.
func (mr *MockComputeInterfaceMockRecorder) CreateServerGroup(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerGroup", reflect.TypeOf((*MockComputeInterface)(nil).CreateServerGroup), ctx, name)
}

// DeleteKeypair mocks base method.
func (m *MockComputeInterface) DeleteKeypair(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeypair", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeypair indicates an expected call of DeleteKeypair.
func (mr *MockComputeInterfaceMockRecorder) DeleteKeypair(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeypair", reflect.TypeOf((*MockComputeInterface)(nil).DeleteKeypair), ctx, name)
}

// DeleteServer mocks base method.
func (m *MockComputeInterface) DeleteServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockComputeInterfaceMockRecorder) DeleteServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockComputeInterface)(nil).DeleteServer), ctx, id)
}

// DeleteServerGroup mocks base method.
func (m *MockComputeInterface) DeleteServerGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerGroup indicates an expected call of DeleteServerGroup.
func (mr *MockComputeInterfaceMockRecorder) DeleteServerGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerGroup", reflect.TypeOf((*MockComputeInterface)(nil).DeleteServerGroup), ctx, id)
}

// GetFlavors mocks base method.
func (m *MockComputeInterface) GetFlavors(ctx context.Context) ([]flavors.Flavor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavors", ctx)
	ret0, _ := ret[0].([]flavors.Flavor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavors indicates an expected call of GetFlavors.
func (mr *MockComputeInterfaceMockRecorder) GetFlavors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavors", reflect.TypeOf((*MockComputeInterface)(nil).GetFlavors), ctx)
}

// GetServer mocks base method.
func (m *MockComputeInterface) GetServer(ctx context.Context, server *v1alpha1.Server) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, server)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockComputeInterfaceMockRecorder) GetServer(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockComputeInterface)(nil).GetServer), ctx, server)
}

// RebootServer mocks base method.
func (m *MockComputeInterface) RebootServer(ctx context.Context, id string, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootServer", ctx, id, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootServer indicates an expected call of RebootServer.
func (mr *MockComputeInterfaceMockRecorder) RebootServer(ctx, id, hard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootServer", reflect.TypeOf((*MockComputeInterface)(nil).RebootServer), ctx, id, hard)
}

// ShowConsoleOutput mocks base method.
func (m *MockComputeInterface) ShowConsoleOutput(ctx context.Context, id string, length *int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowConsoleOutput", ctx, id, length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowConsoleOutput indicates an expected call of ShowConsoleOutput.
func (mr *MockComputeInterfaceMockRecorder) ShowConsoleOutput(ctx, id, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowConsoleOutput", reflect.TypeOf((*MockComputeInterface)(nil).ShowConsoleOutput), ctx, id, length)
}

// StartServer mocks base method.
func (m *MockComputeInterface) StartServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockComputeInterfaceMockRecorder) StartServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockComputeInterface)(nil).StartServer), ctx, id)
}

// StopServer mocks base method.
func (m *MockComputeInterface) StopServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopServer indicates an expected call of StopServer.
func (mr *MockComputeInterfaceMockRecorder) StopServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockComputeInterface)(nil).StopServer), ctx, id)
}

// UpdateQuotas mocks base method.
func (m *MockComputeInterface) UpdateQuotas(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotas", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuotas indicates an expected call of UpdateQuotas.
func (mr *MockComputeInterfaceMockRecorder) UpdateQuotas(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotas", reflect.TypeOf((*MockComputeInterface)(nil).UpdateQuotas), ctx, projectID)
}
