// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fBWM9v7x4D8o+gYUrdf/CgAA///cWZXWvyQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
