// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
