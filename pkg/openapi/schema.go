// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
