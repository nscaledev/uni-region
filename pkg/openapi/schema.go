// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9DXMbN7LgX0HNvVfZrSMpkqIoUVWv9hQ7cXSJbW1kOxsvfS5wpkkimgEmAEYy49J/",
	"v8LXfJAYckhR/lrWvlexOPhoNLob3Y3uxscgZEnKKFApgvOPQYo5TkAC13+RCKgkcnH59Mr9rn6OQISc",
	"pJIwGpwHr+aAXEN0+bQTtAKifk+xnAetgOIEgvPSUEEr4PBnRjhEwbnkGbQCEc4hwWro/+IwDc6D/3VU",
	"gHVkvoqjm2wCnIIE8QInUEB0f98KKMg7xm82Amrb1cOZD/QoYDI+w5T8hRVEa2G9oKjcth7e6ohrgZaL",
	"VPUQkhM60+CknP0BodyINduuHop8oEfBGofZJnwpKE2zeiDdMI8DYxbDRggFhBlXbDLjLEuR6rMGXD3i",
	"owDr4HimwNgW6lqAl0Z9JMj5LfAGIKtm60A1wzwKjBLPriGGUDK+jsORAInYFEk8E0gylGAZzhGeYUKF",
	"RBwEy3gIAhGK5BzQlPEEjfUC/ucWxxmMg9aYynkm0N0cKAIasggitGAZmoFE4+AfEs/+Z8rYfx8/DbEc",
	"Z91ufzjB/L+Pn0ZsNg5y1PyZAV8UuJF4FpTRQCQkwiM/Wu4HzDleBPeGU//MQMjvWUSgcoL8aj6on0JG",
	"JVD9T5ymMQm17Dr6Qyi0fAzgA07SGNQ/E5A4whL7kHcLfMIEoPLvK4dNW/+td0QE5//+6L6HcSYk8DaJ",
	"glagkRmcB6PjYW/Q7Yft6Wh01h6MwrCNJ/1eezSZjEZ4Gk4jOAvu3ykiTCFUMFmBEqkRT0+GZ9CP2tMR",
	"nrQHJ8dRe4SPcfukd3x6Mj09G/SHE0PAjcjLLeA3TiQY1C4jwKJa0QXCND+BOyskXZyOn3YT7KSPvAcR",
	"1RxoGFpNEJx19P+Cd+p8gyn5EJwHvVG/0xuedbqd7lF/sMVG2EU03QenX3QUe/yZMYnFTkifxviWcYOv",
	"kGWqz1krIIrSRvgsHB6fdtuD7vCkPYgGuD2KcLd9Ojw9i6aDbhiNIouiRis0UF4rdK5dn2RaYJnmen0V",
	"ef9pactN3dZH0qOQWGMEVtDQmFCqh6oHn1kMnxWnSv0wiC1xW0girtjpVLGT5qZeP2gFEeEQ2lkInXEQ",
	"ImgFKeMaYJolE3UCnnWNyilZyGJ10IRpsCOaFXZ2RLXWuiy+lcz41EhWc9YRrMQz98mRq/rJ/Lsi9oyA",
	"uGwsEFoBSfAMzJHcWIrkJ4eBEscxu4PoIorUDl9h4iSUpQorZNV/jZh9t53MagVpNolJeHl1EcfMYF8j",
	"nuJJXDrOKqRgQNhmUc1bgwYqE8Cf6s0OLvsvxOT4zc0vv724nSRv07d3KZn0R93f+72blzM2++X6+/j3",
	"/vz28ukPJ8/J4MOLP2bZczI4eXn9vYTf5rfh8T9nV38MZr/033R/X4zY5PhFN7xL737/7QX//bco/tfx",
	"m7u3x/93/vbZ6+HlT78uot9e/xw++/EP3P+Rvv3X8+ETciEvf3qbTv7J/mcr3lFUtwXDqOYda3uJlFFh",
	"tDn4IIFTHL+wVPGr/bgN87jNCo+no/5pb9juTaOwPZicTtqj7hDagyl0eyeDaBpG04JvpozpvWi23mU4",
	"/YuOidAK+C2OSYRcH3eEmzPOHsQ7LrQsJkIOuuErohfUG512291eu9t71e2e6/97G2zDLjlqZp1BZ05m",
	"8wSSDu51u53erNPrziYVuZ1mP+KExAtFw1RCjP4FjKKrGEtCswSd9YbdV+hv1zeLGN/A34OW6iGC84GS",
	"7eImOO93W8EszdRYMZuREMdPjFrSbwUJJIwvgvPhoBUkLIJYTyIkoaFEzy/7J111GMwXotSt1wpugUZM",
	"yY2L508VrG6Y4/598512itLaDbaN9IZaPZnA3vYUou8VWv9gc9qJGPwfHCbQCVmikFjd8363P2h3T9rH",
	"vVe9wXmvZ/d8DjiW82uJpUK5/XPhiAEPB9NRfzhqHw+h2x4c9/rtyVnUa5/0o9FxdDIcTU4nBTFkNIIp",
	"oaDoo+Ia2oKunDNHdYHjYdg9OcPtM5jg9mB6MmmPetNBezqcTiejs+PT0UloutwSQRgldJYvJP8RojIt",
	"shSokDi80RiMWabmiWCKs1gqnKlfnjA6JTP1+7N5Gi6+V/8/v/zp1zg8/ufPyyBORuFIIeN0MBxEvcFk",
	"enYKJ90pPu0Pj8+6akVCzH+GxYsEO1FihLrujnuj4ekZ7p/1+sPB6DSa4P5gcjIIR0PcHQ6mOCgcUBrQ",
	"s1Evmky77S7u9toDmIZtDMrQi05Pp8PoeNAfqO2wpnGx1i1oukyiOFpP2rYtVIh7sQtpHyj7QNk7Uva2",
	"Xo1asi7cGMjpHYaule76CIdwv9s/bnf77X7/Va9/3h2c947f7kidk6zf7w7at71O/6QzbM/SrH3SP+mc",
	"nXS6J+3TEKJB72RQJhZ7mkac3CrjKMhbB/YU1c6Mi15XnZ4/2f/0u93gXenofPHm8unlhRqWCYOWCJz7",
	"hU1i0LaZkJwZEKnMglYwdZpABBOClXFyA5zqYzsmNPugrQ9OsEKvNVjUT8CF2ab+oNM1SyF/wTPyfXDe",
	"67YCwabyDnN4Y9ppcAovaXAeWNSojreEywzHloPVN/eDYqgtJKWmiw0SUrdBco4lwhyQGgZLMokB3RE5",
	"R3JOBEpjLKeMJ52g7C07CNHPIETXOvQqEtZd1SlAzvoDOAsHYfvk7OSsPZh0++3RqDtsH4+6cDw4GfYm",
	"02NFxDHWa+11+4P7ev/gJ5aLOcHVnfZlryJ9mO11oM8DfW6tkRY0t0kfrRjPzgG+ixz9gjzg9p7ONLMu",
	"kjAmQGWnUKGegsQk3tOZsayhnGqe654PTs4HJ4rnlkGULEUCQg4SqYFCoBI4EiyBuzlwcHeIr3/eyK+N",
	"LrIKfr1p34GQW7LQFLDMuHEpOb9A7qo5n+JYwH2rojwYVSJ0uvPbZHRbuoAstWwudKvbVkfXkf4OUdmb",
	"qy9t83iDEg08mob6pe9/u7dXCrBu3odILLsh64WVbeS7zDqofp/haN32UNv18qiW25tdyn17tCHya6cv",
	"lDJ2unfkmJobL6BKpRqNRq1ASKw+9rrD4f1ebyObElX5+nFpiG9TpT/QVk5bX+RWRV/fVnU7+n9H3QeG",
	"HrzbmdsbWEIetvdoGgcz/qvRNXajlq0pRVRiU75BXaMSAfMlUcdXF49ziK15vNgafZxrGvkYpJzcYgmX",
	"V+Ugp44Ja7BIVV8G/U7/pNsZDju90XDr6Jx1CqQNx3Fi4RtVFA+C4SAY/iMEw7vtJEMjFUI31DIio+SG",
	"cdrW4QbvQ8bhfYIJfZ/ezN6zFChOyfuQJQmj73EYQiohKssTX16VCQ6cY4EmABS5bgjTCN2ROEYTQNMs",
	"npI4Vr+KBQ3nnFGWiXjRGdPfWYYSvEApi2PrOTXJLXqAhFEiGUdEClRmRf3RSBRkUD6mkiF8h4nUt7gx",
	"lL2xLAWuiXdbJExwZGOAd1O3gHN9F0+oDiR8b9EVtMyX91WEOmROWLRAtkvQ+KjYYlkGLA/V/FqGYGq8",
	"22Z8EwmpF9pCjNutMq0jBgJRpjBPJSZ0THG+mSbbBE0JxNHWNDhlfEKiCOjDsJ8PU4N3JU9QyEHHl+BY",
	"oIjp5czxLVSXoZiaxKADCz7HvtxhgSKgBCI0WSCcyTnj9iBsmWgFxUsTQCHOhGmk4K80VJxyA9StUHFT",
	"ZY0iZCm41KGLq8t8uzWa1F7T7wrcjCmFEITAfFHCDmLmUkHzbAS8GkSxBUYINZG311qI/aDw8zBaMNLQ",
	"YtpPDpbuJUMGUWGMSfJp9/uCoozChxRCJUoZRxmdYxopsHQfxMIw4xyiDnpV2nWMJMdUEKDStsM0GlP1",
	"VWRhCGosijDiIPmig9Dl1BAN0VuqNizEAloojQELRRIp4xIRibDQeWRCZLDtDlImf2QZjR62bZTJ91M1",
	"TM2elcQRRMUZkksm+ECE/LR7+ForSYqMpoRGGusGqm0xmFHHv/BALKrDWYj3RoLUYFLNpeSgGc0eAp+Y",
	"+n0gOClk1mBZU6kd8CFVcqtTsqp8CQnePPqX7v5wJcS/Y5T/FLjM01XrVCBLbCajeCUT1pgFa3uqJp6+",
	"9+V0zX8HJHfHvisuQCfKolHTrOQ1eNKPnErIapctdOavy+rdIo9iNefXJUj4ADFfVnFctkL3RGVKPSTh",
	"rxbVz90EJTNscw6Bjf+obkcOqx3Jtymm+z8z5k8HM59N9MgqMmxoi7dUhfZdF8EGTsvK0WohUcfnDLiJ",
	"//YPZWHwEq+PAA1UGxb7CxFyHQGWF96c5MrYrCW3axeL1ZDkJpiD2sp4tdNvc5BzMGLHQkxckE8EkZJP",
	"EKEEh3NCy/w7YSwGTBVMpeQaD0gcbO7+k6vXyITeVoJJoDPrIB3wa3e8hTAP50RCKDMOXnFjknPWE82T",
	"q9fCTyUmo8fXGydq41VvSOeQAMcxUq0RoejZ9/7RbBzzuj2dpZnhriLJZ/3sppWelXinXSJajY98cLvC",
	"evIVm8l2W4L10eoszZ6bdKjV2Z5dva5suneb3QCbOG15sObA5yD6wffzmZpOSUMytaf3KsNVc8R8m21b",
	"lAj22dVrgfAtJrHWqbBAAoC60KWX137yqyMojZNNZJTnq63ZIO/OLGWzeWvm2CbLK/xbiHkk/l6s1A+Y",
	"C/HfuH9vTMNllrD93QpLzFGFvVXdKx/TFJN4F6owZWZTKwGaJWp+m5nQ0tl97zwoXMpyWkPeuYHpiA4V",
	"fRtTejX3ZJXaK989wNQCsfgkGo51a18ruz1yio6CdVtlx0G9s7pTGeCBiKqESzeFWunz1yYesBwHvaYi",
	"VKk8ijrcS659RKiXv80PTUIMX6mWy3jU3UvAbcJjsaSVZfxwC3wh58YfivKGNgAZUYBIVw+aZjT0y2Kb",
	"iObVFnACTsHUzZy0NX+YeFu/BlLOZVslggkWMBzkNYnKw6Epif1aTenqZnnEK1uAzCBtSoAjbG4rlEZs",
	"rUZCpxwLybN6xcl4hkyBKs80xgNlIzY2zCU3zmVS87yW4Q+5enV9/RO6gQWaAQVenaLENr7Br8zlw8+w",
	"2DS+vabQ80iGJtrNpx2HczJTyi/jmmGB35IQhHdCl1W4PNNrATyXx9Pd9uV+DXuYogU+u76UKqh9Qp9E",
	"DvMdbczKch4se4tRVhDjvMhFIUe9D+Y61wiRenn8KNJ0aZ3rhaK7+1zdbfXlK3AmaDh332DV+5nNDPVq",
	"WiZfFJEpIurojGOIVrHikko3DGJTOlvOQWzVuPzk9goCl5vazLD4xbpk96bO2qXVIu/ltb+YprkdpDMk",
	"FkJCUjbBfV4Zl0a7zqBXrcwRqm34O8zl4mhCGK3BnMvEXY8DJp6advdFpu6mHtb9cF9k8m7q8bNpd19K",
	"9V23VNvILDQCcSNZeuTiUjxLzZOFlwe12cFLl7bFtugJxibF2JQoXC9N7HpzVOVYLmCoJZUaDbZW1jTw",
	"dOT8m2dkb2z98rqSSr0MznNCSZIlxg2jWhWeQMnUOW6OWDXSWkPXl569NvRgub0nbbvB6t5Uuyxvn1v2",
	"ytgafbU792YFkGWnHpZIddXOJOO7K+NJn4lla7Wcf94quQtbAaYLv/lqUs/XmK1bJp43tWP1CekzYNPb",
	"ga3M5SXqy6vbAcKmgZdnSwNscjiVx9rGBi+B6FlBXU1VDyA/503NvQp6nglpbkdNNaenL65dpIKSLozG",
	"CxSzO+D69hOFc8xxqLSjlvOZIcbRfJHOgYoW0qH8OgAFdIiLnCNcdFJNc18tjfS8EiVMSDQ8Lo2tGDIG",
	"OpNzhaIEf/hF/xGcD49bQUKo+7Pnu1EyVy5Pi/B232GeR7/n1wSZMa4cYRch8WD+8a5+rqs8Pr6mBrT+",
	"qsSOLgRXnkaGadAKsihdN36da6X2Nu5L9qOU1rSztrc8hs+bknsRTdvvxCbX63J+emOWdKpaY6eMBck5",
	"MITzybis9TohZL7n5mFp+1co58t07+RQ5WttLaPdzrFm16toq9FZ7Q1uLYeUSgz4ELQyQt39NWeZ9Nv3",
	"1WFMu7pRRDahIDePYtrVjeJqIHiviHLnwptfLl5URyguhwok13kPcnx8Db6D8lrWy5o15LbGZfBZpMze",
	"hMQSLuoYcg1qNl5AbB03USnosqro5CaeZ05tvpBJpg91FzPijlnOwhtl49hSTr6zNjcGffacuX02wSEV",
	"u0t0kAkyk4tUEYK+o54SqvVXQCkOb5TirDRVLCsQQTTHUlck0LWk/CD9nFulyyAZ+03r6uVhTR0q32Cl",
	"Yh06ALtMlKXb3YYhBoYaff7HcnmInyuVKJb9bfoMKi47qEGS+lHX5Vf406YIEWhc0nGNdVtdQLnIRf2B",
	"951Y9q+X1GHTPeM2rMrva182ootp321ARR2ruFoYn1CM7qK1lZeys9q2MsgKPi5LRIAnLJOVeiHLOCoX",
	"w9gM/I+u9UqJlKYLL5Hz3q668jXUI+zH0jJrSuy4UUroMokD5k5RmR7m3kusYnG1jMjKrkzVPM7bSU1s",
	"jzXQSxOKLE0Zl2LlVBQm0pZRQGLOslgbfmVtUzvaTc15Yb0zWq4CIkkeu4lMQRYxpr45FWO3te/B+S2E",
	"sTHlHASgxJq5pVkVQAgXwGrFCGTYGVNPtNLyabmMtPrt+yY4/4E8/3m5/ZNx6is70ZoDKL/lXz65C+ux",
	"Ip7e1Rp3a31oeYWehopXiVQ9etdqFRivKKrWgPmanBIrC9yZ3v0jbUTXZsPhs18xrtRyuLK1IjwuL8al",
	"0YOJZm7n+UKS46m9H1uyx229idrRys6zVSd9XlVkq2IUagG/6p5eTXZN+3o4NSQNFqzLn/hGARo5n2Qx",
	"YM3VhKmb4n3HS/thG42zfLOgB21pABuRQTN5kDtYv1ahkMWwJ6HgRmqGs82SwRR32eoGISp7xxsY5IU3",
	"/b6oEbM1rwWVWjKNJs5d68toL1ZQGtPC1jIoabQTtY4u35ODX4PT6xGpdqO/x1+6p6EKUlMZbIM20nj/",
	"vrat29FrWTPGTgrI+sG3pIZdCaGWCPRDlP6wp1f5jbW96nfe0CLyoln6mhmkYfqPfzvUhLVZdsWTm9+J",
	"+ssK7/NRTQog2HkvVvo7Z7Jv3baT1mGkxOG8hDkk2V4wsQqRh5C0ApVksSRpDOj5xZOjyyt3eY7+pvWZ",
	"v6NUYUPBmmIhkJxzls1siIC7qlBnQv2pubohTy6f/urTN0uhXDisjRhQIzy/eJIDumag5WSc+kNr82au",
	"4UNLPjlEGmVbcOP6favlTdtlE3Rb3xFUWUrvxodL07GnowOKP/yAXXnLtqxhTFOSBCnqy7v4NHpb96U2",
	"U47l13AIF4N2Nnub3ND1xFGvhPsF3petdyuYXeJbUTSmQR/TdpOykw9aj8/r8hm0i7ej7kTxvgn9AIFa",
	"AXQTr+1+Iq/ipJbv6/UNy04bzJmi8NOajFxr2a6JpMwjojcv7NKFhtGSC7yxCMovZr1iZfMwHnHkqRq1",
	"9QY5sIp6UL4MBPXFxXu527F2nn1SuRIrX9AxjsxIzl2PspRRFOOMhjpmyzRVIm0hYSOF51vutq20FWtI",
	"P5cM9aSmm3juPIr6U/6QLZP3UdI3NhNcUbjKO2RxhjQc8b524WtsHq2kfR22TiHkd7JNiwJfawWeLe+1",
	"laCrtTk8ocA4irSPE8dXFVTvK6cCklubfF69OtGGScohT2ZwSQn5fx0avZbc1pVIVvOEgQInoS2lk4AQ",
	"eAatlWBdhjM573u0Jf+oF0gCF2BHNayA4EOKaWTCUTXP/PTq1ZVtoiRVB+naR0JHCysZFrmGLy8yOUf9",
	"TrdfPXVaaJKZ4GIzNthYVQUjJyAxX1jZoScwqUAXV5cCMVv0AKsJmAA3rkkLK+arxpIuFzgrV615b25m",
	"g9ZKBZqM2utNUH1NbZv39jbKjakLUgWt5dJNEpKUccxJvHif0TxlutQxn9X9MOOYyqVZ9W9uynKZIXU0",
	"xCSUOj9azln0Xn21lsbSIAlEBLtBinJjvpstT80dTyKEfiXaUpzNR5m4Sl16hM06VX2Jq3cP45bi6u4X",
	"PIH4jSly6XnsWkdbl+JPYtUc6UKYrVI0kU44VNRXqYdjL99DTNEExpTQCD5AnoSquF6xgeY6LCVwNef/",
	"+3e3Pbpov8Xtv9797R/nxV/t9513H7utYe++1OLv//gvbzZjc0yUC5GuMQqMf+PlVBfGfNz77uWwp+VS",
	"qd7gy1KbcmZrpRrjBGJGZ0oX2kx5S5Ouktu7ZVnvVlAksEwWVbi0EChV9uKAt68nuNl+e4ytakglq5u3",
	"JunZRt0vJz7vvGXFVLvuloNmLxvlev9UqSHsQ0KpCKjO6CmXWSuOp4zeUHZH86rEOhkMZhxHFZfDTkJg",
	"RT1czdNawZeuIRTH6rxdwpSpm8rNs70rkbXrTo1KRbHSJxvUxFKjw8ULhLNZoojZRM/ixOoxCdOZSFTC",
	"B7m2ktme+MJ7jty7gsp7m0biWR7KWSZ5U0ltt72+8pSFrmHRomZtYxot9yr/qdWOCJY+m3N+T0T86MKw",
	"NoP64wqtmxq+psi4D7mSJFCVeKY8agzSJD7nFnqEJbRVcx9Vz5dkzJ4P6IoIu/dXFN/7pB769Ej85SZL",
	"uNj1JFCC7WHi35qEXvM/wVSSMDcBrT5oMpF7nX7nuDOmVxzaHHQRUyNQbY6yMZ90peKMc6AyXqBciV9S",
	"JW/H4+h/j8ed0n8eqi7W0P5jqodrGKxU5d/HXbra792cIduuwmn+ui+VZwGac6ydoDnH1jmeM0r+zDYX",
	"5ExYpK3ZjSvP0qjZyt2IG1aOq+u2wzddt7cYYxnlDfjVFAt2TGuLGTqgrMX1RyZsvVwTXRwx+p10DD6m",
	"mC42lGI3nocJUJgSiaacJQirTzTCPCJ/QTSmOQg2a6Qcj7yTTSqxt9aQxDOU4DTVcPIJkRzzhTMvmTFF",
	"TX4LCDA1rSkz/g4cowSwWuGYmmLYC5TzpJYjWD+eKUH7VlSTTICSf0AjTUPmYjTSt5LWgTamVr/Sn3LM",
	"t3R3W7BXR7JjCTPtO0HE4+Ssqz9hGUCtuqakbP4mhY9I9SfntJV4ttlsqLxz8e7BW7jpckdpho0dnVtS",
	"z4oztHRDca2GtAa1dvZVKxSvgvzSPTjg+EYUfjM0Acz1XekNUFQtt6xlQczujN+1XLX9CYtg5cfXPA7O",
	"g7mUqTg/yusIdeiN6ECmKEa/wDroUBHiWL/ecmTgP7rtH1VGClqBNtzUxAoTCrYHja5HqHj49SeTgUno",
	"1JPg9kRXArNhvhERIbsFvtDyhbPMZKSZMlQuI40I94s+1CvMaKLnbLnoMS3zZQchm5rFITblqGyFNBzb",
	"sOLCOwUfUlatiBXDLcR5Rawx1XVJnrAkzaR5taJwebWMSHU5KiKbCJDCRK9XhK6nCMSY6i9uyYoXiYyh",
	"yCu7tku/uLoslTQ5D5QW1HXZ2jglwXlw3Ol2jo1+M9e0dYRTcnTbOyr7JsTRx4rn5un9UVFM0ZPakH8z",
	"0hDFJCEyf0DApu2Un1UoOfSM00+y4igZ02otMKfZ2VwJJ6OLjbFXeogIZjbRkQIOdY1ioc6qyPklRMtV",
	"1gCU2LopnmcdirDmKjRjWj7zHP2p08tY0RMsiDC2XX4DHTElb8w7JmpG8hcIxE3JXJPhA7dgitriCp5i",
	"wDpEagbSdykhtYZdbI1zuSjQacVrpgbJ3z7R7ww9A3mRkje9l+V9f1nZ9WJfdZlC45PX+9/vduuEbt7u",
	"qFy709aqv28FgyZdH/Ywi56lt9dZvJX39TzHe51n9Z2T+1ZwsmeUrXtKo3zYaTPEf8z9+51+v6qoH1dr",
	"shRNjqoypSjdoodqKIdobeLec0x1KZ08xgohl7DmXsWoeN3y+j2IsmjJQaMFOdZZcp0xfcEkGJGlK8Rg",
	"JAidxXm6uTolPFYkSouah4sWwqLMqJjrmwx7Splyi+UElhR42yYJ1vK/0pEqEWVbM3ie0LcLexd58Qfm",
	"PjD3XpjbndBHH90txEHz+Myax56IoLWxa77jZdJpBSnzGYJPtKMIYUThrpQESJdyaqsC8YqJjRLRlhAW",
	"Vw6aJR1Iy6LvWbSo51nXhEC5nrgJhrhfEbS9xnrU4iBov0lBuzfxePTRUcrl0/v84sTj4Xmqf6/kzyoB",
	"gemiZIxiIVhItFDTQst4n6ocZQZ6AE9d5gCvqiD9ve7WyiOWBybahYkG3cFeJ1l5E+6L1ogOyseX4vZw",
	"Jli5SvnW5s+Ogql7OLIPttHnVIs39yoUgUcxxCqaxn+oS+arpIBG9lQpNXevBlQhUyt+py1Nqrxq4gMs",
	"qnyMg3Q+GFTbirmjj66ebjMraz1P7dGEclz1woF3sKkOfLRHe+c/7oLFWBrLBR4fz9RowMDdw+F2MD2+",
	"PsVzc7f8TP0EBoupDu19P/CWRCCscNBPJ+q2KNGiLwEqW0qWaEePSWjWrp47IufWW1PxqM5JBGNqsiht",
	"SVoTBQk4nJvsyg5CF7MZh5lNuhJojmkUK5nFMRUptlJvsjBPLjIqOYtj4J0xvdJxzYjm0tMsDIWYUqYr",
	"wAKdMh7m4o7oBWjZa5d3od1ROAw13DiOF2OaCXCfv/9OlMuAIPTE/K6WrcR4Cdxbgk20oA5mE5kO/Gsh",
	"wRCR34kxJYmS2phK5wVTixDGE1YK6MqdVy0dyOUitcywolZUX1iI23mJbet+syjxPZf4OEL8n4a4dpHc",
	"BtaD4D4I7i/KY5BJ3xuockVKNuGyq2zvXLal/8AxWZ374GAiHZj6c7sa3PSzvB6O3xJbLnGErqsFl3Ao",
	"hbKLMLJP16Ep4XCH41izqi6nQUNz6WM1C6SspgnL9H1whFgmzR/l2r7frOdztc7VIzlAr6sbvIMYW6ob",
	"+QBn6NJIBzl1kFO7yamjjxVSauoe3cR0e/SQVtnuugrtwVt6YLFH8JZ+njN6XeTEBn7blyG8JbN1DyfV",
	"gY2+Xf/m0tHYwMR+rZPCRQOO3ZdRvZljH0dJPZyzBwHxpauyR/p9h8amuH0O4jMe9jo7zA/V5zny9aMa",
	"ezj3zdscB94+HP7fyOG/rV8qf13qkzinarn4QbqAfvFmb04rPdpBIhxO+/2e9kcf1X9282PVMOmncmaZ",
	"U1JDf/BrHTjw8f1an1/h9Xm3arjw0+m7dSzYPRxxBwb7T1V6N/c15+4nCAW0b2ass+vzRzW+5Xtv9yzL",
	"o5kUBs072Q3mlZIHGQtmiIP4PFgIWwoGZRroV7MaGwF+Ttqr3q8hu7ZwHdT7A/s8inqfn3trtW0/ue9P",
	"wd5A692D9D8oz9+k8mwovvE98Rpm3N/18Coz7lmZ6x/Y+aDMNVLmTFUcj+FmSiILFMGUUMUWGnxXsMbm",
	"qc6AzThO5zqv05Z0j9lM/5liLnWR9s6Y/kB07tYdXti3c4ipdpNykhBJbm3eFRF5OZ+8bFZRXF9k4Rxh",
	"MaaVWWMW4hhay4V6vxOIg6bxCE1iNtElhGxFaZChggmHc1cbe44FIlIgdkddaWnuqdxVrSr/MgV6LXF4",
	"o6v6j6kbwFOwSDC1bDoTrmpRqcAwKlKtYhKa52zGVMwxh8ggPX+h/G6OJdwCRwmEc0yJSBTK8of6zAOG",
	"WNpebiHrr7bN2yJ6r3fSPyyd7KRS2Hk/h3g4lAtdkQFHH80/1E8RSExin1SQnMAtCISjhNC2qdzuKszr",
	"TqIzplpGXFxdKvLUyeP5S1kCFPASTP6mLqKFCTXvEVg4dEeXHTqmGS2NoEta4RmYd1qpMMKjxGobFG0D",
	"ok6zhDv3MENdocvm1P+rRdxTg7bdecEMcCh7902WvftkKrbj472JA/hgcFBfouoijtmdsI9DKO4dB65T",
	"XuhiHOjz051Lto6frUOhODHpjOlvcxKDOy1jcgPoiSkvocWCOj4JndqHGZdnUGc4xNOWOovRHYljNOGA",
	"bxCZIiIV7yvd3LzKpx/jZRRa9mw2+dl3SgExVS7GFD6kMQmJRIQilnEkIIbQPQKwRsa4t1VW1r8PCfPD",
	"8k7sImscZC+8pccP8uYgbz6zvDFv+3vEjHsUxjTIn4xZq+Jq1s6Vfzv0PnjxRwvlLixowfh27e8DW+yf",
	"LUiCZ7CGK/T3XZjCDLwPnrg0IO5U7FV3PXDEgSNqOOLLTudvnD2wE5t5Mt0fFAh1CP0/XOQ8kJklnl1r",
	"k4jxXfm5edDQOu7KG+3AVUU8zW73oQc+OvDRI/HR/f3/DwAA//+/Qu+XMA4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
