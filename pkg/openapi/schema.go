// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
