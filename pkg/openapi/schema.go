// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
