// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
