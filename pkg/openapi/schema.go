// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9CXMbudXgX0H1fqlJakmKlyhRVamsxp7xaD22Fcv2ZBx6XWD3I4lRE+gAaMkcl/77",
	"Fq6+iOYlSj7CyvfVWGwcDw/vBt7D5yBk84RRoFIEZ5+DBHM8Bwlc/0UioJLIxcXTS/e7+jkCEXKSSMJo",
	"cBa8mQFyDdHF01bQCIj6PcFyFjQCiucQnBWGChoBh/+khEMUnEmeQiMQ4QzmWA39PxwmwVnwv45ysI7M",
	"V3F0nY6BU5AgXuI55BDd3TUCCvKW8eu1gNp29XBmAz0ImIxPMSV/YgXRSljPKSq2rYe3POJKoOUiUT2E",
	"5IRONTgJZ39AKNdizbarhyIb6EGwxmG6Dl8KStOsHkg3zMPAmMawFkIBYcoVm0w5SxOk+qwAV4/4IMA6",
	"OJ4pMLaFuhbgyqgPBDm/Ab4ByKrZKlDNMA8Co8TTK4ghlIyv4nAkQCI2QRJPBZIMzbEMZwhPMaFCIg6C",
	"pTwEgQhFcgZowvgcjfQC/n6D4xRGQWNE5SwV6HYGFAENWQQRWrAUTUGiUfAPiad/nzD2l97TEMtR2m53",
	"B2PM/9J7GrHpKMhQ858U+CLHjcTToIgGImEuPPKj4X7AnONFcGc49T8pCPkjiwiUNMhr80H9FDIqgep/",
	"4iSJSahl19EfQqHlcwCf8DyJQf1zDhJHWGIf8m6Aj5kAVPx9Sdk09d96R0Rw9u/P7nsYp0ICb5IoaAQa",
	"mcFZMOwNOv12N2xOhsPTZn8Yhk087naaw/F4OMSTcBLBaXD3QRFhAqGCyQqUSI14cjw4hW7UnAzxuNk/",
	"7kXNIe7h5nGnd3I8OTntdwdjQ8AbkZdbwG+cSDCorSLAolrRBcI008CtJZLOtePjboKd9IH3IKKaAw1D",
	"qwmC05b+X/BB6TeYkE/BWdAZdludwWmr3WofdftbbIRdxKb74OyLVlCVso+Lezd1U4vsB9mCjVFYQsPG",
	"iCwrHQ8+0xi+KE6VejaILVBjSCKuyO1EkZumtk43aAQR4RDaWQidchAiaAQJ4xpgms7HSkOcto1JJlnI",
	"YiWIwyTYEc0KOzuiWlslFt+Kpx4byWrOOoKVeOo+OXJVP5l/l8TCJMY3jGvRPMSn4aB30m7224PjZj/q",
	"4+Ywwu3myeDkNJr022E0VPRP5ngKRmVt2imXrAZKHMfsFqLzKFI7fIkJN787qrBCSP3XiKEPjW1mUwIt",
	"HcckvLg8j2NmsK8RT/E4Loj7EikYELZZ1OatQQOVCuBP9WYHF92XYtx7d/3rby9vxvP3yfvbhIy7w/bv",
	"3c71qymb/nr1Y/x7d3Zz8fSn4xek/+nlH9P0Bekfv7r6UcJvs5uw98/p5R/96a/dd+3fF0M27r1sh7fJ",
	"7e+/veS//xbF/+q9u33f+7+z98/eDi5+eb2Ifnv7PHz28x+4+zN9/68XgyfkXF788j4Z/5P9fSveUVS3",
	"BcOo5i3rm4iEUWGsHfgkgVMcv7RU8dp+3IZ53GaFvcmwe9IZNDuTKGz2xyfj5rA9gGZ/Au3OcT+ahNEk",
	"55sJY3ovNltvFU7/omMitIF6g2MSIdfHqTihZYThs10XWhQTIQfd8A3RC+oMT9rNdqfZ7rxpt8/0/70P",
	"tmGXDDXTVr81I9PZHOYt3Gm3W51pq9OejktyO0l/xnMSLxQNUwkx+hcwii5jLAlN5+i0M2i/QX+9ul7E",
	"+Br+FjRUDxGc9ZVsF9fBWbfdCKZJqsaK2ZSEOH7CUoWEbiOYw5zxRXA26DeCOYsg1pMISWgo0YuL7nFb",
	"KYPZQhS6dRrBDdCIKblx/uKpgtUN0+vebb7Tdn9Wb7BtpDfU2pEE9ranEP2o0PoHm9FWxOD/4HAOrZDN",
	"FRLLe95td/vN9nGz13nT6Z91OnbPZ4BjObuSWCqU2z8XjhjwoD8ZdgfDZm8A7Wa/1+k2x6dRp3ncjYa9",
	"6HgwHJ+Mc2JIaQQTQkHRRyl0sgVduWCH6gK9Qdg+PsXNUxjjZn9yPG4OO5N+czKYTMbD097J8Dg0XW6I",
	"IIwSOs0Wkv0IUZEWWQJUSBxeawzGLFXzRDDBaSwVztQvTxidkKn6/dksCRc/qv+fXfzyOg57/3xeBXE8",
	"DIcKGSf9QT/q9MeT0xM4bk/wSXfQO22rFQkxew6Ll3PsRIkR6ro77gwHJ6e4e9rpDvrDk2iMu/3xcT8c",
	"DnB70J/gIA/QaEBPh51oPGk327jdafZhEjYxKEcoOjmZDKJev9tX22Fdx3ytW9B0kURxtJq0bVsoEfdi",
	"F9I+UPaBsnek7G29/lqyzt185OwOQ9fKdn0AJdxtd3vNdrfZ7b7pdM/a/bNO7/2O1DlOu912v3nTaXWP",
	"W4PmNEmbx93j1ulxq33cPAkh6neO+0Visdo04uRGOUdB1jqwWlQ7++edttKev9j/dNtt5fdnqvPlu4un",
	"F+dqWCYMWiJw4Qk2jkH7ZkJyZkCkMg0awcRZAhGMCVbOyTVwqtV2TGj6SXsfnGCFXuuwqJ+AC7NN3X6r",
	"bZZC/oRn5MfgrNNuBIJN5C3m8M600+DkUcTgLLCoUR1vCJcpji0Hq2/uB8VQW0hKTRdrJKRug+QMS4Q5",
	"IDUMlmQcA7olcobkjAiUxFhOGJ+3gmI06SBEv4AQXRnwKklYd5SlADnt9uE07IfN49Pj02Z/3O42h8P2",
	"oNkbtqHXPx50xpOeIuIY67V22t3+XX387JHlYkZwddq+GHWj9/O9DvR5oM+tLdKc5tbZoyXn2QD5FCQm",
	"8Z6kaVV3n2hqbJ/1j8/6x4oaq4BJliABIQeJ1EAhUAkcCTaH2xlwcKdPb5+vpeSNjkBySr5u3oKQWxLX",
	"BLBMuQm2OI85C2KcTXAs4K5RUqtGyYbOqnw/H94Ujq4KLTcXR+Vtq9vxSH+HqBjn1Md92Ul1gQYezHb7",
	"2ve/2dkrBdgA6H142W7Iaja2jXzHPAej6AsonW3F/a7HKrXcvtlx1fdHGyI7kPlKKWOnEzmOqTkLAqqM",
	"jeFw2AiExOpjpz0Y3O31nG5ToioezFWG+D6N3QNtZbT1VW5V9O1tVbul/3fUvueh/IeduX0DH8HD9h5L",
	"4+DgfjO2xm7UsjWliNKtje/Q1ijdDfmaqOObu6lyuHXycLdOtDrXNPI5SDi5wRIuLovXf1rmwN8iVX3p",
	"d1vd43ZrMGh1hoOt762sMiDtRRUnFr5TQ/EgGA6C4b9CMHzYTjJsZELohlpGpJRcM06b+iD+Y8g4fJxj",
	"Qj8m19OPLAGKE/IxZPM5ox9xGEIiISrKE19Gjrk2N8MCjQEoct0QphG6JXGMxoAmaTwhcax+FQsazjij",
	"LBXxojWiv7MUzfECJSyObeTUpEXoAeaMEsk4IlKgIivqj0aiIIPyEZUM4VtMpD7fjKEYjWUJcE282yJh",
	"jCN7O3Y3cws416fUhOordh8tuoKG+fKxjFCHzDGLFsh2CTZWFVssy4DloZrXRQgmJrptxjd3BPVCG4hx",
	"u1WmdcRAIMoU5qnEhI4ozjbT5CmgCYE42poGJ4yPSRQBvR/2s2Fq8K7kCQo56JsXOBYoYno5M3wD5WUo",
	"piYx6CP3L7Evt1igCCiBCI0XCKdyxrhVhA1zjq94aQwoxKkwjRT8pYaKU66BuhUqbiqtUYQsAZd0cn55",
	"kW23RpPaa/pDjpsRpRCCEJgvCthBzBwqaJ6NgJevF2yBEULNndQrLcR+Uvi5Hy0YaWgx7ScHS/eSIYOo",
	"MMZk/rj7fU5RSuFTAqESpYyjlM4wjRRYug9iYZhyDlELvSnsOkaSYyoIUGnbYRqNqPoq0jAENRZFGHGQ",
	"fNFC6GJiiIboLVUbFmIBDZTEgIUiiYRxiYhEWOgMJCFS2HYHKZM/s5RG99s2yuTHiRqmZs8K4giiXIdk",
	"kgk+ESEfdw/faiNJkdGE0Ehj3UC1LQZT6vgX7olFpZyF+GgkSA0m1VxKDprRrBJ4ZOr3geCkkFmDZU1l",
	"dsCnRMmtVsGr8l3V92Zgv3Lnh0uX31vG+E+AyyzRsc4EssRmclGXciiNW7Cyp2ri6XtXTPT7d0CycOyH",
	"/AB0rDwaNc3SjX9PYo4zCVntsoXOGXX5oFtkGCxni7rUAR8g5ssyjote6J6oTJmHJHxtUf3CTVBww9bf",
	"rr9SLavbkcFqR/JtSqH7FlgYYw5q9Hi5028zkDMwnGC6IyJs0koEkWIZiNAchzNCiyQ1ZiwGTBVMhUwI",
	"D0gcbCLyk8u3yNyTLN1vgNa0hfTtTGQC6A2EeTgjEkKZcvBygMmk8BZr0EMoknxy+VYUOiu9PwWuepv0",
	"C19vPGcp1QQNyQzmwHGMVGtEKHr2o380e+l01Z5Pk9RseJ6RsXp200rPSrzTVihH4yMb3K6wnnxWsnKW",
	"2bEh21qe9HDrNElfmNyV5dmeXb4tbbp3m90AvxKTTFgHcnWwzYHPQPSD7+czNZ1iUDKxCmWZ4coJPb7N",
	"ti0KBPvs8q1A+AaTWKt5LJBQ/q+9TfPqyk9+dQSlcbKOjLLkohUb5N2ZSuqRtwCIbVJd4V9DzCPxt3yl",
	"fsDcfey1+/fONKyyhO3vVlhgjjLsjfJe+Zgmn8S7UIUpM5taCdB0rua318gbOhXrgweFlZSUFeSd+TyO",
	"6FDed2NKLycKLFN76bsHmFogFo+idG2k9Uq5kpHTvQrWbfWvg3pnDVwa4J6IKt1t3RRqZWJemStqxUur",
	"K8rbFGo9KOVeiDYjQr38bX7Y5NbbG9WyikfdvQDcOjzmS1paxk83wBdyZkJ0KGuIwlg7pRQg0qVQJikN",
	"/bLYZg15rQU8BxfS082ctDV/mCugfgukmHi0TARjLGDQzwqsFIdDExL7rZrCaUJ1xEtbTckgbUKAI2wC",
	"6BBpY00BTeiEYyF5Wm84mWCFqbbjmcYERewlgjVzybVzmTwqr7PyU2ZeXV39gq5hgaZAgZenKLCNb/BL",
	"Ew9/Dot149vIuZ5HMjTWkScdy5qRqTJ+GdcMC/yGhCC8E7oUsOpMbwXwTB5PdtuXuxXsYTLMfa5mIa9L",
	"hykeRQ7zHd2e0nLuLXvzUZYQ4wKbeVU6vQ/mhNEIkXp5/CDStLLO1ULRHcct77b68g34txrO3TdY9X5m",
	"0/i8lpZJ7kNkgohSnXEM0TJWXAbgmkFs/l3DxSytGZdpbq8gcImEmzkWv9oo4d7MWbu0WuS9uvJXBjQH",
	"VnSKxEJImBddcI/KzHIeVzn0qpVRodqHv8VcLo7GhNEazLm0ydU4YOKpaXeXp1Wu62HDD3d52uW6Hs9N",
	"u7tCXuaqpdpGZqERiGvJkiN3VcKz1CyzszqoTeWsnCPm26InGJl8UFNvbbU0sevNUJVhOYehllRqLNha",
	"WbNBpCPj3yx9dm3rV1elvNcqOC8IJfN0bsIwqlV+riSZ0uNGxaqRVjq6vlzalafh1faeHNsNVveu3KW6",
	"fW7ZS2Nr9NXu3LslQKpBPSyR6qqDSSZ2V8ST1olFb7WYLNwohAsbAaYLv/tq8oRXuK1bZglv6sdqDelz",
	"YJObvi2j5CXqi8ubPsKmgZdnCwOsCzgVx9rGBy+A6FlBXYFIDyDPs6Ym1I9epEKaAztTeufpyyt3eK6k",
	"C6PxAsXsFrg+kEPhDHMcKuuo4WJmiHE0WyQzoKKB9O1yfScC9K0LOUM476SaZrFaGul5JZozIdGgVxhb",
	"MWQMdCpnCkVz/OlX/UdwNug1gjmh7s+O75DDnAI8zW9c+5R5diE7S5NLjXPlCDu/pQ3mHx/q57rMrmzX",
	"FLTVX5XY0VW7itPIMAkaQRolq8avC63UHhB9zXGUwpp2tvaqY/iiKVkU0bT9QawLvVaTiTdmSWeqbRyU",
	"sSC5AIZwMRmXYlwnhMz3zD0sbP8S5Xyd4Z0MqmytjSra7Rwrdr2Mthqb1R4q1nJIIR/ch6ClEeqOVDlL",
	"pd+/Lw9j2tWNItIxBbl+FNOubhSXsO49IsqCC+9+PX9ZHiE/HMqRXBc9yPDxLcQOimtZLWtWkNuKkMEX",
	"kTJ7ExIVXNQx5ArUrD2A2Poov1R9Y9nQyVw8z5zafSHjVCt1d43BqVnOwmvl49i6Oz5dmzmDPn/OnD6b",
	"+wolv0u0kLn3JBeJIgR9Rj0hVNuvgBIcXivDWVmqWJYggmiGpU6S14V//CA9z7zSKkjGf9O2enFYUzTo",
	"Q61GMJUEnpeKFlTjYFo35IcQ1ACvftTFv9W6tItABBoVbE/jdZapvVgPoV4R/SCqce+CmWq6p9zewPHH",
	"wKvObT6tj3yXiip48OvKJjyieNvFmiouZWdzammQJXxcFIgAj1kqS6Ulqjgq1k1YD/zPrvVSNY1NF14g",
	"570dQWVrqEfYz4Vl1tTbd6MU0GXumJuzPuUSmPMosYzF5YoTS7syUfO4KCQ1d26s41yYUKRJwrgUS9pK",
	"mEuZjAISM5bG2iErWoE6AG4KdwsbNdHyDhCZZ9f8kKndIUbUN6di7KaOCbh4gjC+n5yBADS37mdhVgUQ",
	"wjmw2mABGbZG1HOLqKrFqkir377vgvPvyfNfltsfjVPf2IlWKKDs9L2qUXOvriSe6lXsythWVsxlQ4Oo",
	"QKoee2i5YIhXFJXLhXxLwYKlBe5M7/6R1qJrvUH/xY/+ltL+L21ZAU8oinFp7FOimdtFpJDkeGLPrSp+",
	"si1NUDtaMai1HDzPClBsVbdALeC17uk94V7Rvh5ODckGC9aVMnyjAI1crDAfsObIwJTY8D4WpOOjG41T",
	"jfjrQRsawI3IYDN5kAU+v1WhkMawJ6HgRtoMZ+slg6kDslVkPypGrTdwlPMo911eTmRrXgtKZUc2mjgL",
	"eVfRnq+gMKaFrWFQstFO1AagfO+afQvBqAek2rVxGH+Vlw1NkJoiUmuskY3371vbuh2jiTVj7GSArB58",
	"S2rYlRBqiUC/due/jvQmO0m2R/AuSpnfiNgs08kM4o2DL6cq+bdDTVibkJW/6/eDqD9E8L7Bs0muvJ33",
	"fKm/C/L61m07aRtGShzOCphDku0FE8sQeQhJG1DzNJYkiQG9OH9ydHHpDrXRX7U98zeUKGwoWBMsBJIz",
	"ztKpPbp3RwhKJ9RrzeUNeXLx9LXP3ixcscJh7Um+GuHF+ZMM0BUDVZNk6pXW+s1cwYeWfDKINMq24MbV",
	"+1bLm7bLOui2jt2XWUrvxqcL07GjT+3zP/yAXXorfKxgTFO9Ainqy7r4LHpbIqQ2g41lx2MI54O21keb",
	"3ND1xFFvhPsF3tdtdyuYXUJaXl9kgz6m7TpjJxu0Hp9XRR20S7SjTqN4H569h0AtAbqO13bXyMs4qeX7",
	"envDstMadyavEeTDn00BtZ7tihuO2U3l9Qu7cFe2aCEEvrEIyg5MvWJl/TAeceQpMLT1Bjmw8tJBvswA",
	"9cXdw3KnY80sK6R0JFY8oGMcmZFcuB6lCaMoxikN9V0q01SJtIWEtRSebbnbtsJWrCD9TDLUk5pu4jnz",
	"yEsV+a9SmXyMgr2xnuDyGkfeIXMdsuGId7ULX+HzaCPt2/B1ciG/k2+a14JaKfBsJaitBF2tz+G5oouj",
	"SMc4cXxZQvW+ch1gfmOTwstHJ9oxSThkSQYuWSD7r0Oj15PbumjFcv4uUOAktFVX5iAEnkJj6RItw6mc",
	"dT3Wkn/UcySBC7CjGlZA8CnBNDLXRDXP/PLmzaVtoiRVC+kyOULf4lUyLHINX52ncoa6rXa3rHUaaJya",
	"S79mbLB3SBWMnIDEfGFlh57ApOicX14IxGwxAqwmYALcuCZdK5+vfMezWgurWODkozmZDRpLxUpSao83",
	"QfU1ZVA+2tMoN6auXRQ0qlV+JMwTxjEn8eJjSrNU5kLHbFb3w5RjKiuz6t/clMWKNEo1xCSUOm9Zzlj0",
	"UX21nkZlkDlEBLtB8spUvpMtT3kWT4KCfmrXUpzNExm7ok56hPU2VX01pA/345b86O5XPIb4namH6Hkx",
	"WN+CLtw/iVVzpGsmNgq3fHQioKK+UukUe/geYorGMKKERvAJsuRQxfWKDTTXYSmBqzn/37/bzeF58z1u",
	"/vnhr/84y/9qfmx9+NxuDDp3hRZ/+8f/eLMMN8dEsWblCqfAxDdeTXQNxYc97/5czW6uVNX0XoostClm",
	"nJYK940hZnSqbKH1lFeZdJncPlRlvVtBnlgyXpTh0kKgUASKA96+9Nx6/+0htmpDKlnevBXJyPY2fDUh",
	"eecty6fadbccNHvZKNf7l1K5WR8SCvUidaZNsSJXrp5Sek3ZLc0K2OokLZhyHJVCDjsJgSXzcDl/aglf",
	"urZPHCt9W8GUKbHJzdunSzdeV2mNUvGpwid7qYklxoaLFwin07kiZnOrFc+tHTNnOkOISvgkVxa92hNf",
	"ePXInau9u7dpJJ4aR7FC8qbo1m57fempIFzDonl5041ptNir+Kc2OyKofDZ6fk9E/ODCsDaz+fMSrZty",
	"r6YetQ+5ksyhLPFMJc0YpElIzjz0CEtoquY+qp5VZMyeFXRJhN35i0/vfVIPfXokfrVJBRe7agIl2O4n",
	"/q1L6HX/55hKEmYuoLUHTYZwp9Vt9VojesmhyUHXuzQC1eYOG/dJF7VNOQcq4wXKjPiKKXkzGkX/ezRq",
	"Ff5zX3OxhvYf0jxcwWCFgvA+7tKFYW9nDNl2JU7z12MpVZDfnGPtBJtzbF3gOaXkP+n62o1zFmlvdu3K",
	"0yTabOVuxDUrx+V12+E3XbevcGQJ5Rvwq6kr65jWFhl0QFmP649U2NKq5nZxxOgP0jH4iGK6WFO120Qe",
	"xkBhQiSacDZHWH2iEeYR+ROiEc1AsNkcxfvIO/mkEntrAEk8RXOcJBpOPiaSY75w7iUzrqjJOwEBpvwx",
	"ZSbegWM0B6xWOKKmbvICZTyp5QjW7yxK0LEV1SQVoOQf0EjTkDkYjfSppA2gjai1r/SnDPMN3d3WdtU3",
	"2bGEqY6dIOIJctbVhbAMoFZdU300e77AR6T6kwvaSjxd7zaUnkT4cO8tXHe4oyzDjQOdW1LPUjC0cEJx",
	"pYa0DrUO9pWL2S6D/MrVpnd8I/K4GRoD5vqs9BooKlfm1bIgZrcm7los8P2ERbD041seB2fBTMpEnB1l",
	"9X1a9Fq0IFUUox/r7LeoCHGsH/o4MvAf3XSPSiMFjUA7bmpihQkF271G1yOUIvz6k8mMJHTiSTx7oit0",
	"2Wu+EREhuwG+0PKFs9RkipnyUC5TjAj3i1bqJWY0t+dsZeERLfJlCyGbmsUhNmWibOUyHNtrxXl0Cj4l",
	"rFypKoYbiLNKVSOq64U8YfMkleaBgzzk1TAi1eWoiHQsQApze70kdD3FGUZUf3FLVrxIZAx5XtmVXfr5",
	"5UXpIXtlBbVdFjVOSHAW9FrtVs/YNzNNW0c4IUc3naNibEIcfS5Fbp7eHeVFDj2pDdk3Iw1RTOZEZrXm",
	"bdpOsQJ/IaBngn6S5apkRMs1upxlZ3MlnIzON8Ye6SEimNlERwo4DFlKpVC6KnJxCdFwFS8AzW09E88L",
	"APm15jI0I1rUeY7+lPYyXvQYCyKMb5edQEdMyRvz5IWakfwJAnFTytZk+MANmGKzuISnGLC+IjUF6TuU",
	"kNrCzrfGhVwU6LQUNVODZM9k6CdpnoE8T8i7zqvivr8q7Xq+r7p8oInJ6/3vttt1Qjdrd1SsqWnLmt81",
	"gv4mXe/3hoeepbPXWbxF2vU8vb3Os/wkxl0jON4zyla9ulBUdtoN8au5f3/QTx3ldd1qXZa8yVFZpuQl",
	"VfRQG8ohWpu49wJTXeImu2OFkEtYcw8olKJuWV0dRFlUCdBoQY51llxrRF8yCUZk6cotGAlCp3GWBq60",
	"hMeLRElei3DRQFgUGRVzfZJhtZQpg1hMYEmAN22SYC3/KxupdKNsawbPEvp2Ye88X/3A3Afm3gtzOw19",
	"9NmdQhwsjy9seeyJCBpru2Y7XiSdRpAwnyP4RAeKEEYUbgtJgLSSU1sWiJdMrJWItrSvuHTQVGwgLYt+",
	"ZNGinmddEwLFOt/mMsTdkqDtbGxHLQ6C9rsUtHsTj0efHaVcPL3LDk48EZ6n+vdS/qwSEJguCs4oFoKF",
	"RAs1LbRM9KnMUWage/DURQbwsgnS3etuLb13eGCiXZio3+7vdZKl58O+aovoYHx8LWEP54IVq4dv7f7s",
	"KJjaB5V98I2+pFm8vlduCDyII1ayNP5LQzLfJAVs5E8VUnP36kDlMrUUd9rSpcqqGd7Do8rGOEjng0O1",
	"rZg7+uzq3G7mZa3mqT26UI6rXjrwDj7VgY/26O/81x2wGE+jWuDx4VyNDRi4fVBuB9fj2zM813fLdOoj",
	"OCwO19Ms3dwv6KoVBNBVuZ4BDqXQb+cj+2ILmhAOtziOtfzT2ao0NDGVkFHJWYyUUBqzVIdbI8RSaf4o",
	"ls77bh2L5TISD+RfXJU3eAcvo1KW6R6+RmWkg1A+eBy7yamjzyVS2tT7WMd0e3RAymx3VYb24IwcWOwB",
	"nJEvo6NXHUys4bd9OQtbMlv7oKkObPT9ug8V1VgxTVMPt77VOVdiA469TB+LYx/GSO0eWP/A+l/MSD3S",
	"hZE3drJtHeUvqMb1tWo/VF9Gmetq1HvQ6Kao9YG3D2r9O1Hr20acsmcZHiXsVMvF99LyulT83sJRerSD",
	"RDho+/1q+6PP6j+7RahqmPSxwlRGS2roDxGrAwc+fMTqyxu8vrhVDRc+nr1bx4Ltg4o7MNh/q9G7vq/R",
	"u49yhp69tV0n5rJq1N/zibarZ/5gLoV7wX8Hv8GU976Xs2CGOIjPg4ewpWBQroF+bmJjJ8DPSXu1+zVk",
	"Vxaug3l/YJ8HMe8zvbfS2vaT+/4M7DW03j5I/4Px/F0az4biNz4BXsGM+zv4XWbGPRtz3QM7H4y5jYy5",
	"2vf0TS1BYZ4yV2yhwXeZ3jbBYwpsynEy0wkRthZqzKb6zwRzqaubtkb0J6KfjrnFC1t0npg08YSTOZHk",
	"xqZ7EJHlwWf1JvKqtCINZwiLES3NGrMQx9CoVrj7QSAOmsYjNI7ZWOfe21KMIEMFEw5nrqjkDAtEpEDs",
	"lrqajNxT8qJcjvVVAvRK4vBal8MdUTeAJ9NfMLVsOhUu3b9QmS97nQeJmISmDvyIihnmEBmkZ0973s6w",
	"hBvgaA7hDFMi5gpl2Qs35uUfLG0vt5DVR9umKLfe653sD0snO5kUdt4vIR4OdbaWZMDRZ/MP9VMEEpPY",
	"JxUkJ3ADAuFoTmjTlDx1pVl1J9EaUS0jzi8vFHnqrKvsiQkBCngJpvyzrj6BCTWFfC0cuqNkpn7GiKa0",
	"MIKuBYGnYB44o8IIjwKrrTG0DYgQoRsCt66icV2FqM2p/7VF3FODtt15wQxwqBfzXdaLeTQT2/Hx3sQB",
	"fDI4qK/toF9HFraqsuLeUeA6ZRmio0DrT6eXbAEcm8CpOHHeGtHfZiQGpy1jcg3oicnL1GJBqU9CJ/ZF",
	"o+oMSodDPGkoXYxuSRyjMQd8jcgEEal4X9nm5jkb/Yodo9CwulmYMjfKADHpoSMKn5KYhEQiQhFLORIQ",
	"Q+iq566QMa4o+dL69yFhfqruxC6yxkH20luz8yBvDvLmC8sb8yiuR8y4aur2KWRXa32liatZOzP+7dD7",
	"4MWfLZS7sKAF4/v1vw9ssX+20A9Er+AK/X0XpjAD74MnLgyIO1VJ010PHHHgiBqO+LoT9TfOHtiJzTw5",
	"7Pe6CHW4+n84yLknM0s8vdIuEeO78vPml4ZWcVfWaAeuyu/T7HYeeuCjAx89EB/d3f3/AAAA///RSynr",
	"zgEBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
