// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mL38Ik7E/f3/BAAA//+7/WlUs6UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
