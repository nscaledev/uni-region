// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//9PXtIJHgIBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
