// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
