// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
