// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ck/Pcnd3/z8AAP//DcPDKfMUAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
