// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
