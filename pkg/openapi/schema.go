// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
