// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
