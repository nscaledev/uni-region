// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
