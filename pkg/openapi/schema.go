// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JlEwmDtjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
