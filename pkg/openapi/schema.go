// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
