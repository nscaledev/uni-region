// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
