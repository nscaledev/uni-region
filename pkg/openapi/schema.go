// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
