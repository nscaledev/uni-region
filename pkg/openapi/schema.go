// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbbW/jOJL+K4RugbkD5Hc7L/6y6Omenc3tzHSuu6cPmE4uoMWSxI1EaknKiTfwfz8U",
	"Sb3ZsuOke2/vDvMhQCyRxWJV8eFTReopiGReSAHC6GD5FBRU0RwMKPuLMxCGm83Vu+vqOT5moCPFC8Ol",
	"CJbBpxRI1dD/E3NQwyAMOL4vqEmDMBA0h2DZEhmEgYK/lVwBC5ZGlRAGOkohpzjEHxTEwTL4l1Gj3si9",
	"1aP7cgVKgAH9C82h0Wy7RYkJl+JZfV2z57WtxP0DdN06kaDN95Jx6Nj7g3uBjyIpDAj7Ly2KjEcUpzH6",
	"q8a5PAXwSPMiA/zX0EQHyy9Ple5RVmoDyiq/pllpn50vzi5gygbxJV0N5osZG1zSGR0sJrPzRXx+MZ+e",
	"rYLt7fbU6VUK/6fiBtykusZ+Q/wkSSwVoaKOlOGeSZ1FdCGFdtZYUeYN8cE/fplBQCmpMOTEmmac3XlN",
	"gtC9uetqWum5kmxDfJfgZEO4sXoM8KEtNqY8A0ZcJ2KHsNqHRCpibFy61kyCJkIagrOlXNwImmV1C7QZ",
	"iTlkTA9RxTija6n0a6z05SmIilIHy3kYMK7vg+V0HAaJfTQJA86CZXBJL6Kz2fl4MB+fLQZzNqeDS0bH",
	"g/Oz8wsWz8cRu2RBGOSQS7UJlrNpvXyS4XyY8iTNIR/SyXg8nCTDyTjBEDvVsH5u/bGVcW2IjIlv5Iwh",
	"1YozBuLrgqYWcyBcSg2KRApsONNMEyatw1K6hq6jCsXXPIME9DcMpweqCQPBgZHVhtDSpFJx7YPJpFyT",
	"nG7ICkhES+0aoVKdhjfCyHsQldpcJF3FdSQLqNbtm+urOkrt3DFExXfNhG+EgAi0pmrTmjKRwnYplFxz",
	"BooUGTWxVLn1VYN3r3FVDoYyaqwxIwW23SduA286ns4H48VgNvk0mS8nk+V4/Fvgw5mezePL6dnlYHYG",
	"48F8NpkOVhdsMlhM2eWMLc4uV+erZgcoBdovCAM7A82l4CL5aKjBFdI8BIcVBUSojSxAaEOje6taJksc",
	"l0FMywzhxz55K0XME3z+Y1pEm+/xL73684csmv3HXzDoHg0oQbNfwDxIdX/1LlgGMDuLxosLOriAFR3M",
	"48VqcDmJ54P4LI5Xlxez88tFhHqYTYG6N2psX4zoH4Cy3kXXQDip0Nr5MqcJvBqD0H24EaDnZoPxdDCd",
	"fppMl+P5cjJ7qedyyXBP35c2WSwnF7+1fLsqp9PxfLCeDKeL4dkgKcrBYroYXiyG48XgPAI2nyzmuH2C",
	"QifbXanZ0YNl4HuiyDVnnL5TfI2cI6jFBNvTsc6Z8DjUuTbEpNQQqoCgGGr4KgPywE3q1n53kQkXSB9B",
	"rUH9gMjyddCoraA797MfHf1GZyRxEBNllOffAP7eCFIKeCwgMsCIbUZkFJVKAeviHu20NIoKzUEY34cK",
	"diOwpS6jCIAhTFGiwKjNkFzFThK3+IboFVENISkyoBrxsZDKEG4I1ZbRaF26JSCk+ZMsBfs68wpp7mIU",
	"c8C2LZ4ADNegLFUEDWWAR67NN7D1r4JiVBlJYi6YNY8bys7VMePXrvfj0D0bjM8tdI+X88VyvsAluxcH",
	"8nGTSyUFj4jhoAYzggIjwGgnK4qbHhfkJ1yPhZTZsAKRkyhwAxH3gwfHGV+C/z34ezIIeMMeRwHfyHqi",
	"FH5X/zt8ZeTRCDfwO8crDkQfjoXw76R5RvstVnaf3IpwOMU8lqRUE3gskKIMWxubbs1kN+X7EQQoHvnF",
	"nyNLSSDcw06Jk5sOnbMLUManZQekviGYJ4OXqo1CBgWPBRUM//PM58+fPl37JpFkMCQWgbUFbxemvuF7",
	"NMGUYAzx2NshJKvS4byTC8xpivopDgbJlrbBaIVry9beXF9pIk0KaDyKwqWGSq7jgm4snCmIMg+WX3qS",
	"pHZc3UUZomcQ7sVIKXRZICAC9nXRd2fjP6xlWiIZhLsbh4G8kIoqnm3uSkHXlGeIOK2O9ajVg0RRYXZG",
	"tc+qIdvgGUkRZzwyNjcxqWR3+JZmmXzYUz0HxmklpOH+tzWXcu7FQO9ZFbuR8RnUCm3uI424t6uKYVsJ",
	"aPwd2dt2SvwlOLzBNmrJ1V8hMk0S2Bel7s1+WLvEr688Isp8BQqB5u31r7qlKXKJBBSO57LFvt40l6Ww",
	"MAVFCjkomhFsjXj84/f90pITdPnx+lcdEh7bXU6D3ZoV2NUhpIB+wYj5fWJLwf9WgrcNuXrX444mpT0+",
	"S9fKzo4fmJ7bTfrEeAWwwfMRwVm1M4XOe7WK3h+HA0P3RcZe/hwG3ECuT0vKW5kGVYpuuhkdZX0j1nlg",
	"BXOdglA3Ptsk4fiO6XiJLUL9XHVqbcen5Dsfse2uvWsNvKw+83YEvGjGIXlIeeaqBQ7pSESFc4rf4JF9",
	"cRFbJIcbgYOH5AHJHlJTr6p2dJUKZIOmVAK5qU8GoEnSCPmESUNkdwQQN2JlM3lLk2wvIwkDAyrnAlC1",
	"KN1X3u3ORhKkD9wtuq7XOrnvqZZ/X4D46JhSZeJTWNInbLnrNNv9OU81A+657Ic1qI1JEaypIHXDykUC",
	"gFm/xKWIsEsPsLqMvxfNaA644pzPZemsX/+IbFGgF4s6RYP9MEMqcTYnIJAHsI44EvMMemX21Bie9pl2",
	"1YoI18wlnxhHVQQZSWomTOJMUoPWu7rWz0Oas1V3en2KHXOoqz7vqV7VypozDUuPXL7hvHsYfFw1/XgQ",
	"Gpr8ZHOtbZ9ymKj32tO+6YmaqgayFzc8x/UILlBsb1v/8x2G5MrVBOySp0TAA1SzxLWKvXUqy4zZJR/T",
	"tSwV0s41bqsZrm5fVKCIJLAhDzzLqsozKQtGDTh4ia3odZkJUHTFM466Dx1jyqkJlgG2HeCQfeH2zF7s",
	"ZnZoK66LOqeaJ6PakKrb6Uoe3qqd6AM7dbdI9GyV53PV+OgW7yOiNfvWMLeHgu5zS5HuLGygEC+BVLvb",
	"fii2a1x9lmjeEw05xbStkmq3Ga59xNUIwbiCyGQb5yi3m2y4SG7EXxpZ/sSK5FTQBJcrxhyu/0xSRjCL",
	"1wiXtG7Y2ZV6ndIty/Uism1BmG1Sz+JZ3GqZaGeUg345SsFeWNc7kag5EOrhaY36P9EVZJ/d+eC+ejbt",
	"Iugj56IMWxN7nBgSsyl4RLNs43yM4FqXozCEdXunuBFcMHiEesfD0MNdy4YfNQj4wTL4ry/jweWbwW90",
	"8Pfbf/3jsvk1uBvePo3Ds8m21eLf/viHPq8fOnXtmWAr/OzKJj+X2tgCop/7u18+VljosvpsQzCDVLYq",
	"SKKUKhrh5hL6VEUTqUi6KVIQOsTsXBkbyCBYBdF1J2zqeoW2DY6LoKUNOZu1ZKPNMhCJSdFaOX38yf4I",
	"lmezMMi5qH5OeozhqNIhQu7efj35Rvkv5d5u7Fcz71b3faQTDu0R5+hKlsZz4f7J/qMYZ6vPkWsI3+mG",
	"Z6OIdlmmYdO3B117FFfqSuGJiNGKlh7YqLz9cys6dkmXB4DKg34Z2WPELCNvrq8akFBAmUd5pHB63zNH",
	"yyzOhFX9u3nlTwKk/WHxiZZJjtO0UWA5uF2JubRIKww8muExMnDaFY8WlO6GiBV027LgdU85uW9+7bKz",
	"LfXZ9KFdjG+CpRT3Qj6InWJ1+6dlEAx2XrtCU3+A9azu5VNAs+x9bCv5p2BDCxee+khvXfzvM4Dlr6bt",
	"6Tb3PZnWMcjgNQPZfi8Z6BmSWws/wHOL3rg4xco9EdVLLjsm7x1wH8puwxcuc7uyh+0Q6lZnfseNF+KG",
	"ob1p/z1sHBsjBeU9Nd7+bOZNFY2GJkcSmgOkUBCqVlxRtamIoD9zzanSKc2AkX//+P4X6zp/yvQ8n/Yp",
	"jxuzby+tku0jex3m7CdvdGjQvR0OiQtEpeJm8xHb+ZKWPRfqnlDt6/G+AOUIR12X80c6K6AK93Z7fNU9",
	"QLO4kskHO0513mLfvJUM9h7+qrJgGaTGFHo5qitow1Lwe6nEwBZRhlIlI6fyaD0ddfojnYpkYaeFk0eN",
	"XiHT9uuUPewrd67HRSz3rfPWFqT8vUvGdSTXoDauaClLW4/RoNbc7WiGmwzlttj5B9f1o2uEeNAkw8Ey",
	"GA8nwzE6FBkTLXiwDGbD8XDmkovU2ndECz5aT0YHadMHX3VlEHMBNtHEyfuU1kd5AjJRtEgx9SH2LgEm",
	"BIn9WVBluPXrjfiB2yO4B7qprhP4m1A854bbS1PU4NOqhEa1lhHHHb7GQF1GKaH6RnQGzWREM8CMgUiV",
	"UOHvc32nEdVArYGRVSZXuCQw8EsDBEyEKtEorXyQUk240UQ+iIZ+1ir4VIWbsL2Mm2po6K5QVAI02AXY",
	"vg+nJbFFVF1VCm3guYk2tXCdoTOR0dwInVJVly5NqmSZpOQhpQYwM88hSnGqOZqsPix0h6eYZNpe1UQw",
	"hhLoAQuEEL9B1bxYVgv3itmzYvOm4J8nPhaCnUup0/H4ELLU7Ua7lyO2YTAfT57v13uUvw2DxSmDHrvn",
	"0wY2S9v6Ie3L7fYWm+4slNFTdQ96Ozp4mvTWR5o/0PKLWR/1hLauiDo9fdGguq3o1QPmbh1i1Na3AZ7z",
	"3Qev9Z+8zq9x5e7dWuvKE/r1XF7+PxUFYedTgANEv2ky2r94b4UciSS/0/QRtuBnWwFkzVXDOpwIuar7",
	"tYqMmosks7VGAsNkiBDjnlSlQo5ptIhgeCMsmGeIwpqsbJVYUcZLXRWmYA3uYJe2AI1kQO/tDVguiJa5",
	"uxSGSCQ502RVJtj/RnTzNRmbB6p8ietrzRkGhewjQG9tLuQq/60vMcROyaO7VK6l7l0rjXWD9gcKm8OR",
	"1/qGYbT7AcN2b8mdEP97t4L/iWtuPp6dgBF7V87/d2F2s9JGT833N1sXSZje7sfUO/u8fURGYiXzoyHl",
	"+hwPqqvu5z/7aHzk2yJMx+19Ta3jErOzOjf/53l5Pp4/33PvXuj/PJj/v4bXb4Gu4bOd+j6Ge3aPO3Du",
	"U5Eld6T4Cq7UPi46hSoNT+VK7iz5VVRp5wuA35nSC5jSdvvfAQAA///ZQnv4ijkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
