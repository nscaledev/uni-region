// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
