// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
