// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
