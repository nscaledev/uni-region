// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwIAAP//I4sGhmgjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
