// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3PbNvboV8Hw7kx355KyJMuypX/2ukmbepqm3iTN3rtVbgYiDyU0JMAFQDnajL/7",
	"b/AgxQcoUYrTpF1PdyeWhMfBwXmfA+CjF7I0YxSoFN78o5dhjlOQwPUnEgGVRG5vnt4W36uvIxAhJ5kk",
	"jHpz7/UaUNHQ/hET4APP94j6PcNy7fkexSl488qQnu9x+HdOOETeXPIcfE+Ea0ixmuIvHGJv7v2vsx14",
	"Z+ZXcfY+XwKnIEG8wCnsILu/9z3GV5iS/2AF216orymqtkU3TzsAro+4F2i5zVQPITmhKw1Ott4KEuLk",
	"Bcg7xt8fxGPRHlHT4TA+WzN8FrRmnP0GoTwMv2mHFHBdABdDfRZAOawO7byC0zQ7jN1iuM8Cq4Aw50Ru",
	"n3GWZwdBLlqjlWp+GPTG6J9hBfdmSBDyWxYRqEmMl+YH9VXIqASq/8RZlpBQs9LZb0It7aMHH3CaJaD+",
	"TEHiCEvs4Fa0Ab5kAlD1+5ZQCfRnhdoMQjWK3b/Im3vh5cX0CsZREM/wMphcnEfBDJ/j4GJ0fnkRX15N",
	"xtOl53sSr4Q3//VjMXSY5EICD0jk+d4GJ7n6cnY+HU2G4zCIZ7OrYDILwwAvx6NgtlzOZjgO4wiuvPu3",
	"epN7IblYwD85kWBQ20SARTWKGUeYlhJ30NrYttj5fTejmDywMqy1KRHVpCSAb7Se+dW7Guj/vLdK0kBM",
	"PnhzbzQbD0bTq8FwMDwbT77YzjRQ2XeDWpJ8oDDw75xJLE7ajjjBG8YNAkKWqz5XvkcUZc/wVTg9vxwG",
	"k+H0IphEExzMIjwMLqeXV1E8GYbRLFJr7rtkA+UrtVt7FyoZEiCRaa7XV5M5vy/VFVMHWjy2BUGeWAFF",
	"VxyExSOJuDf3hgP939nQ872McQ0mzdOlksRXQ6P9JAtZ4s09GWbevV92HV0qItW9R+NKd47pSq8HaOTN",
	"R7PZzPeExOrH0XA6vXcMqvbny5B4bdd6E3hdHw2s9hUZo8JgGochZBKil/bLLk1sBl1jgZYAFBXdEKYR",
	"uiNJgpaA4jyJSZKob8WWhmvOKMtFsh0s6P9jOUrxFmUsSZDUIwqW8xD0ACmjRDKOiBRISCxzocFXWEhA",
	"gaHpdokjS61VYPtTLXDOFDkQusEJid7ZRXm++eVdfdnFkpcs2iLbxeu9W2Yuxwa9rA4bY6KwZTohPYWG",
	"3keMWyyZ1hEDgSiTSK0WE7qguMSj0SooJpBEhsHhgwROS2koTkHXrx+N2ArP49n4cjQNRnEUBpPl5TKY",
	"DacQTGIYji4mURxG8Y6/Y8a8+7e9kdSA003QCRESsdigBxV9ColtVmzl7okLrYqzkINu+JroBY1ml8Ng",
	"OAqGo9fD4Vz/71/eMRK9RM1qMBmsyWqdQjrAo+FwMFoNRsPVsir/wiz/Hqck2Xpz74ZKSND/BUbRbYIl",
	"oXmKrkbT4Wv011fvtwl+D3/zfNVDePOJ70VEvPfm46HvrbJcjZWwldJsT4wWGvteCinjW28+nfheyiJI",
	"9CRCEhpK9NPN+EJLVqsQbbeR722ARpptrn96qmAthjkf3/ff6UIv7t1g28hsKONLEkVAP43Vy2E6mDwX",
	"wFHIQZtpOBEoYprN1ngDdfbKONmQBFYgHlAI3GGBIqAEIrTcIpzLNeNEWBEg10RombkEFOJcmEYKqFrD",
	"BZXsPdACbEJXdcBFyDIo7NHr25tStui1K8FCv9kteEEphCAE5tvKkhGjukvG2YZEwFGWYBkznuq9skYu",
	"gQfjP4i+VSzwG1vTQcTg/+AwhUHIUkXwdf4cD8eTYHgRnI9ejybz0ajKn3g6iWfj6Sw4n8IwmJyPxsHy",
	"KhoFF+Nodh5dTGfLy+WOP3OqUOw1ghNH8HnhMqsucD4NhxdXOLiCJQ4m8cUymI3iSRBP43g5uzq/nF2E",
	"psuGCMIooatXWu8Z19t8CVFVNrAMqJA4fK+xlLBczRNBjPNEqTD9zRNGY7JS3z9bZ+H2W/X/9c0PL5Pw",
	"/B8/NkFczsKZwsTlZDqJRpNlfHUJF8MYX46n51dDtSIh1j/C9kWKC9Hua4bR3fFoNr28wuOr0Xg6mV1G",
	"SzyeLC8m4WyKh9NJjL2dm68BvZqNomU8DIZ4OAomEIcBBuXXRZeX8TQ6n4wn2q8zsZndWo+QMVUyxNF+",
	"UWPbgqgS8PY0WfNIvY/U20m9x4YWOkl3F0tAhf1uaDfFK/gMhs94OD4PhuNgPH49Gs+Hk/no/FTSXObj",
	"8XASbEaD8cVgGqyyPLgYXwyuLgbDi+AyhGgyuphUicVaMBEnG+XdeWVrz1ouOhxxPRoqi+UH+894OPTe",
	"VsyVF29unt5c62FZLO8whzfAFWFqt2cXL/PmnoVMtd0QLnOcWAZSvxVfKHo+QhjpbTkghHQbJNdYIsxB",
	"uztYkmUC6I7ItTEA6pqWGuP3lQ7KfKfMi0+zj0x055356DaRrI8iGTJ2Rphgkj6ADXRNUU7hQwahciN1",
	"M8TCMOccorrxg2stJcdUEKDS9sE0WlDVUuRhCBApWwUjDpJvB+gmNiMRbeQoEybEAnyUJYCFMpIyxiUi",
	"EmGhw3VC5IatKJPfs5xGn4ZeyuS7WA3TgduKiwfRziUuvT34QIR8AFz/QrGiKslQTGik0WOm0mttxSEf",
	"teBn0oJ7Y6o1FWm9Ww3I1XgCV+EkDC6uLq6CyXI4Dmaz4TQ4nw3hfHIxHS3jc8/3NgnWax0Nx5P7fSHa",
	"31WxtYiryzRzhmIbvR8djEfifFCfoU1fhzyHJpmKWsrgFMn5FeUMBOg1mmY2ghwmStkOdhbxZzM2LzWT",
	"DeeTi/nkQjFZuxbgwzZlnFESIkmAB+dIDRiCMovQEguIEKHouTIbM8aSQcGoPbOKBaO+D+5MXPgY9okB",
	"y5yboHqTrMqU36fQqsX+fvK0jVx5nket/pkE5/Ei64+Q5zoxM9UtQVupqAaFPir3Rxo9mkbfnkSkPfR8",
	"nVqNQM2pjbz/Bz7RMcRhCEK8M7H/DudQzQVU2tFsrvAhHG/XuEVSwABmXf01Fgg+ZIRDNKiY/KKykmay",
	"+BlQ4CS0vnkKQuAV+K3QBlOLGw8MEWfApS1M6hj1GkngAuyopnJPQYZppP6y2YkfXr++tU1CFsEA6QCJ",
	"0LEVYxzYhj8rFIyR4g0SWzz4aJmbMIwZFyIDqYKPE5CYb4vUtBrcWEfXtzcCMbkGhTysBmcCinFNvsbM",
	"pVYKNE+VVd1OP1fp6p2xtzy/RSM5FXmm2AVUX0N977RB4Zdj6mSP5zfjOhLSjHHMSbJ9l1O8wSTBy6Ta",
	"sZy1+GLFMZWNWfV3xZTV2EbIaJyQULVPQa5Z9E79ipOE3bVATyEiuBhkl5976zcLM51c0aSMN7baxFKa",
	"rTpZFlkwPcLA8x1Fn7tyrF+97vjXDiy2VPLZkV53Vq3+XFh4rYR1m+iVunEXXdh4kKl6baHHqJ69PYsK",
	"z/3LJ2WausdyhYs9C6nJOpcttDEuIRVHVgV4O7MZc463u3S/CxDzSxvHVSNhr5qQWJLwpcXfT0WviiY9",
	"nOa2/lUdxyUAdiQXpk33fyjvq3ttxjtrr9C6ji5yMKpZ7U+9YqTElYWEUAkr4CYl5h7KwuCkSBdVGagO",
	"LPY5EXIfVVUX3p+OqtjspKFXRfCjJx0tMQe1lUm70z/XYDVBiSZSONERRErPQIRSHK4JrTLlkrEEMFUw",
	"Veo/HCBx0Hn8FD25/QXFul21yg7BYDVAOj9id9xHmIdrIiFUnqlThpj6kf1E8+T2F+GmElN04uqNU7Xx",
	"qjdka0iB4wSp1so/f/atezSb9tm3p6ssN9y1q0PZP7tppWclzmkbRKvxUQ5uV9hNvuIw2R5LsC5aXWX5",
	"T6Zipz3bs9tfapvu3OZigEOc1hysP/AliG7w3XympqtZYW2Gq5cxuTbbtqgQ7LPbXwQqrRyEBRIAVBGB",
	"tv5eucmvi6A0Tg6RUVlStWeDnDvTKLjaf9ykvsK/hphH4m+7lboBKzKiB/fvjWnYZAnbv1hhhTnqsPv1",
	"vXIxzW4S50IVpsxsVXvZJnJ9XYDmMhMbhR97yLusXyqIDu369qb0eqq+Te213x3AdAKxPd1ssdGDV8r8",
	"jwrrRQFwrAVTgHKyDVMb4KjV++huTRJTdmfcERRiavbOhjWRZIjQ2CjZBVWT++gOUMToN7IwbIRJ+WIa",
	"IQ4y5xQRWSTUYVc8gdDrNTZTKH94QZe6JE5HkHUvyVAEEnhKKCjQwnUbeONCS4aUj2/Ven0Ha4mTvphX",
	"3sMrEx+uZkT2nJGqnDVRVkclCoQIdQoeU8W+HyaJV89tBtr07xOhfq1aNknH+nvlWg6Rzg4DrVV/twG+",
	"lWvl4mHjaOmGBc1QgEgTSpzT0K1TbP2R0+rBKRSGsm5WaA3zIdQlSm5LqlrC1Kb7JRYwnSCgIYsgqg2H",
	"YpK4rbNKULA54q09w7c7YYaUv22MzNhGcwiNORaS590GoIkUmONnjmlMpUnrNJtzLnlwLlOR5XRbvyvN",
	"xFevfkDvYYtWQIHXp6jIydbgRW1Xc+BfBPBSzMenoel+D7WaoxiuGEClYEtHek4X74U/r+c6VaTrzp8s",
	"13ejtJZcVDXvTiebUxw65m64tVvTfQ1SroGW/cIqxauObVe/fKkIhJ789E1WvZ/Z6juneWZq8hCJEVFq",
	"LUkgai+1KNw7MMjG1OP5RYmWtf1K5erc0KL+r583UmivB7OB7dI6kddh9nRSRQ+ft9yUjlLGvcTUbO8o",
	"cewx+5t6lxZ26j93IudNa+ZmBAVLpLpqz90ESoyAVr1tNKXqGlSLM/1KbMb3MN26fQVTl7nHRziyKrOv",
	"06DFhctbyDaT6ygyGTYH3dzcbiYImwZOhqgMcMi7r451jMNTAdGxgl0p7XO8hOSNOQDpOBiqz2/9mC9B",
	"N0aJao30eUlf7bpyHZOtscGV3qgFse2GKGt9CQtKaAQfoDTOlFxTBpbmLywlcDXl//91GMyug3/h4D9v",
	"//r3+e5T8G7w9uPQn47uKy3+9ve/uNDbdbDescAfy6Ym7o5+yoXUBax27U9fvCoO8Jm0VbJFCbsDrqtS",
	"UbjGHIdKb/pF+AUxjtbbbA1U+EinQ7VfA9Rmp/Cuk2pahv1opOeVKGVCoul5ZWyFswToSq4VtlL84bn+",
	"4M2n576XElp8HDmQUU1u7/E15x89nCQ/xzpl3MeuaXiqH5s+VCOn7tIrtWtCKoZq7azpEhJGV8o7OBy+",
	"bkzaFmpvXaWzHS5/q7bxizv6DshPNhu6xnJjooqIb8Sh+F+zKrG3qCpUf28HvLGKwgsVhR9e1Cx2CWnz",
	"e+lUVLa6xUd/Cpe+XESJGr+5W3aOHjRTx7bzHqAytXiYmyoFqk5ZUQ5VXODTkWHlLJdur7I+jGnXNYrI",
	"lxTk4VFMu65RigpaZ76jdGnfPL9+UR9hl+loY73Ld23fcPRlXVgX2PulVQ+S2+PJfgk59YDi5VOc3i5W",
	"7oHQw+H3du10TxPUeYqgbYoe1o69TZOepk7bWNkTs6vevfUQJspuKrd1Uin3njfBrOQveybRS3Jp0YHR",
	"BN9XCqA7CsuLGmm7ZK3m9K0gJq6OJLNRXNFmsHZNdXOam1jNU4QTqMm4W8ehMqEtRRJtcjRnyRgFJNYs",
	"T7QNXVW7OpplLnvREebcphGUg5olJCTG+lwDV87qgromVW5KoL3UwsMVxl6XaxCAUusyVKZVEFWvKtIi",
	"HmQ4WFBHEUGTRJpYe9u5f13ca379dMl/ipVq5j7ZMK10b1MLVQ682TG8ZHmVRtqLrVb3Hwa4ZIUHS5yU",
	"83cv87WdqMug/Ebs8ldqiGogZWckv+00V/dGTcpzBz0FeoXkHHKcN6OfjlizlZcFGVgXW5fbJAm6vr3Z",
	"yVQOODIJwTtuDv23tPe+GsNaRV3lJytpmP6gYxc4X6VqmUZD49SGjFKm40hUwge5t5Kv3w1/lTBLk1pM",
	"EV8Fg7eOGvEOtVS203WuOgZXPSi6I5acvqfsjjYq0KsfdTgugsbPpsrSTWCfoqo7I+YfW7tsbpMy1f8u",
	"NEiSQl0fmytaEpAm0G1khjf3IiwhUM078nYOrPcRko79cmj9ZhOH+vePZBjNI4PqZtQt9UcOPJID26di",
	"nHZR/UzMFw8LtaA+Wfe6RzqIg8Oe1mcKnpTnXfqjR/d4qCRjAcFhXOYJHMYjUqM5Sh/0KZyj4v3FCZ2j",
	"8HKrOtXO7HRoHf2rMqb1aYGqmpFh5vleHmUOldEWiWYWC61v1tkLlYeSJg609jdz2hvnsHbcyHMjjHGJ",
	"IogJJUXlkcYbkhzHNmXaCIXZY1mdo1VR3y4eLI9lHb37L3VPp7+4p303nBqSHgvW58dcowCNisqe3YDu",
	"VduDZ84LnnUSptc4DSI1g/oawF6UKVzlOG5ibBwoKU7sHbltTgFVDHYQ5M5gYpODvmgosQ3y8YHEjjEe",
	"Qrd9ISXUT/McDPC1Dk2eJCY7nEIB6cadeBWQYipJWFSUNNLAm8Ui+t+LxaDyjzPV6yquaMQMdB1CxqEs",
	"fimmLP8tCKe9t9Urpw6hQ6/ULTvdzs7RKdc9blLlELVLAup7I+/WDNl2NX/JXRpZO3Xd3++yE/T3u7pO",
	"LeWU/Ds/fKAuZZE+t3lw5XkW9Vt5MeKBleP6uu3wfdftPHdVRXkP9/C1vm+r8OTsuaUCKBtD/S0X9koq",
	"E7GsVV0vKKbbehhBtVkDTuTanpw1Z2yXQCEmEsWcpQirn2iE9dnXBS0hMOuuhTh3PCDxypknwXxJJMd8",
	"iyReGe9PwaBLTByWkbMO9boglmIIdzLOXeSiNlT/VBgIEq8Oh/E1IMWYb93rPWSlKunfW9wq/LUEbEXY",
	"v1LtbOmFPqhdPzLehuPnDLiJpJY1+PaM9RIwB27Pk9dPtGvyTtiduYbcHoDWvzxhEbS+/IUn3txbS5mJ",
	"+VlZ1DrIKXnPOA10QfWA8dWZAflsMz6r9Ve+qnKP1XRq8QqiE8bU/WqiWf9k0quExqyNnSe61ts6phER",
	"IdsA35oDCizXpbEC+IZYGUKk8u+8SjXRS9P1lWmErm9vFLkYhaNvYxgNRkWpA86IN/fOB8PBudGCa43f",
	"M5yRs82oltYSZx/rz+bcV+5QbS/jJ0zxSvnPhV9tgRYDhG7KfpXUiSB0lWipaY4m4uIbm0MxJaQ0hMGC",
	"avmTkJRIgZYJFsqsjkguigov2IA50Icr1zWjBPB7fZ8xoUiw1NzuJxDeMBIJtMxXqv+C1oObVssrXK9A",
	"uq4wkDqAVd4Ra65Q1lcg4vp7RGoMVtC+vlzjGcjrjLwZ/VzF8881LO9w5TXu4h8Ph12sW7Y7c9y2fO97",
	"kz5dHRfo666jw12dV1/ozueHO7cv8773vYtei91z4WVVYmmzxy2rfn1rKrUqT2Z1mEi7JmddD1TpoXry",
	"UpF6o50JS8NRjkTkAKHbdnKSw+6DVsj2fszdgW7GF7SsgkWURY3AvmXDN8+vXwwQesEkmIF0JWLJnmWW",
	"qHzeSiB9LyeVyXaxu8oBZbuTFVsfYVE5TaehVbunb9LQB6SUplI9MgKhVpDtYxdOfnyuO7pKB45mvdvm",
	"lpzCgJ13Ej6y4VfJhiY0Ls4+lm+a/dfpuQfCun+wq+MFOuVrZMxlvT7R7h3CiMJdJVpPG4n4OpffMnGY",
	"ze2W3xbQNFRu8RratpvyKw+mnTVfS7tvSY1Rb7W9fZQWvaXFg/H42cfde5b3ZSLY4b891d/XkkfKSlee",
	"7c4XxkKwkGj/X+cWiWxTqRnoE+j0pv4AZ43axoe3oPWq0x+S2ibDyeGerZu6f3+l9l/sJxWgVg92Hm+W",
	"ncYHw0ep+zXbaKdZC4d7uZ47fkCDsKYsHp244524PyT59LJRXQdPHtQ63Uk7p6d6pN3a8b7sSeZr1xsR",
	"j/L0y1ixLcF09rH1xngvU7cnYT+gQdsk7Vvn2+j/nRbvV2C4Pmqy/eFIY/Zm6y0ReznmoezeE9hl+CjP",
	"H+3j7bGTNenqd7CuzQE15+VWiuWFYtDA3uul26JUy6gUqPQVG2tPWDu+5pnTOyLX1hOuRXDWJIIFNTd1",
	"2xNmpv4AcLg2N3gPELperTis7BUCAq0xjZLixbEMG4FTvMEaMio5SxLggwW9Nc+J0VKC2RdUQkwp0+e5",
	"gMaMh0ZI2RX5Rv7Z5V3ruy1wGGq4caJEWy7Km/C+/UYUp3wJowOEnpjv1bKVKK2AuyHY1B7onLvIdRmB",
	"jwRDRH4jFpSkSl5iKosrNdQiBNLX31Vy0QoWllMpfPMUGY1M/YseVnSKx2sLcVDe79d+VKZ5l9fnEZz/",
	"MMR1inRsPOfzKBT/pEED38ty6aqylS3J04dyb/MHp9wjXb6CcLs8vUdD+g/k4hXTm2La7shTs+oWPa19",
	"ESEcSqFfuET2wiwUEw53OEk0URfhZX2m2eo1tKCELlmusx8RYrk0H6pl93/aOE/7VNZnivK8qu/wCQzf",
	"qJz+hAiP+7WwR+b/Kpj/7GNte/rGdg4R8gNGdeqk/KoO7WNE58tGdL6QhtiXNjxAmQ/lBBxJlsNHOfno",
	"IhzXrSGYT4uadN6w8dJefK/PfIJ+jpXlkb51ZvdA+grYiuNsrQO0+kn0bfkqRoa51GdFBwv6HdEBkDu8",
	"La/c1acYOUmJJBsbuyDC3MEp2a7UZXc0ROThGmGxoLVJExbiBPxdfbTQS/tGIG5ukIrQMmFLxGJ9n2ou",
	"wd5g8x0O10Vp/BoLRKRA7I7ugr7tahtfiyT7qN7u/nff3N5TDGCjDrsiCIEEQ/raeGGvEa3Wde+eIxAJ",
	"MfFgvKBijXl5Wbtcc5av1uhujSVsgKMUwrVaaqpQtntuRD8yh6XtVSxkf3mruYGhvELlaFloyeQkgdZ8",
	"1fdT5dGfvqLUIuzsoz27//S+fLOsu0zgOknYndi9r4gWXuuJtIWnSbsgGZtWsQkOxarpYEH/qR/JeHJ9",
	"+7Mm4/I5jNaLa4qXIIl9RCQKOc6E0tEoWFCs46ooF0rPB4jE5noM/YIho/ae5ZxGPrrjOHxfch5VK9LJ",
	"G12IlAt0B0hIkiT60QW1KBODVDNqY0IzFU6QoOwuTvD7Q1mV4jST8/G4U5nipd2l75p7dAqzNB/De6yS",
	"+/rUf8GWD8bdnW99PbG6zD73Vhb67ZP1Oo5fakE79O6SusoZObARd6UXS7nxAIzwvV3OKfRv4f0a7N5H",
	"8u1Jvl133hfUa27XP4F4q1fl96Hdh5DiN2YxJxWD6q6PpPu1ku5XHu/utt4d114cTeaOUPAnRSYes5df",
	"xIm4v/+fAAAA//8wR1d9rKUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
