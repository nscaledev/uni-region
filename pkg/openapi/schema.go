// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/02JOzZaXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
