// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SXyIh4f/CQAA///1K4fHhL4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
