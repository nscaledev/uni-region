// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9DXMbN7LgX0HNvars1pEUSVGUqKqrd4qdOLrEttaynY2XPhc40yQRzQCzAEYy49J/",
	"f4Wv+SAx5JCi/LWsfa9icfDRaHQ3uhvdjU9ByJKUUaBSBOefghRznIAErv8iEVBJ5OLy6ZX7Xf0cgQg5",
	"SSVhNDgPXs8BuYbo8mknaAVE/Z5iOQ9aAcUJBOeloYJWwOHfGeEQBeeSZ9AKRDiHBKuh/4vDNDgP/tdR",
	"AdaR+SqObrIJcAoSxAucQAHR/X0roCDvGL/ZCKhtVw9nPtCjgMn4DFPyF1YQrYX1gqJy23p4qyOuBVou",
	"UtVDSE7oTIOTcvYnhHIj1my7eijygR4Faxxmm/CloDTN6oF0wzwOjFkMGyEUEGZcscmMsyxFqs8acPWI",
	"jwKsg+OZAmNbqGsBXhr1kSDnt8AbgKyarQPVDPMIMN6bIUHIH1lEoCJHX5kP6qeQUQlU/xOnaUxCzcFH",
	"fwq1hk8BfMRJGoP6ZwISR1hij5BAt8AnTAAq/74ictv671Yg8UwE5//65L6HcSYk8DaJglZwi+NM/Tg6",
	"HvYG3X7Yno5GZ+3BKAzbeNLvtUeTyWiEp+E0grPg/r3aihRCBZNlq0iNeHoyPIN+1J6O8KQ9ODmO2iN8",
	"jNsnvePTk+np2aA/nJhtbIRkt4DfOZFgULuMAItqNGUcYZqfQ52VjS3OiM+7CXbSR96DiGo6NGStJgjO",
	"Ovp/wXsl5WFKPgbnQW/U7/SGZ51up3vUH2yxEXYRTffBnbKd4L4V/DtjEoudkD6N8S3jBl8hy1Sfs1ZA",
	"FKWN8Fk4PD7ttgfd4Ul7EA1wexThbvt0eHoWTQfdMBpFFkWNVmigvFboXLs+yZAAiUxzvb6K1Pu8tOWm",
	"bmvB/Cgk1hiBFTQ0JpTq0eLBZxbDF8WpOoQNYkvcFpKIK3Y6VeykuanXD1pBRDiEdhZCZxyECFpByrgG",
	"mGbJRB1XZ12jeEkWsjg4D2SYBjuiWWFnR1Rr3cPiW8mMz41kNWcdwUo8c58cuaqfzL8rYs8IiMvGAqEV",
	"kATPwBzJjaVIfnIYKHEcszuILqJI7fAVJk5CWaqwQlb914jZ99vJrFaQZpOYhJdXF3HMDPY14imexKXj",
	"rEIKBoRtFtW8NWigMgH8qd7s4LL/QkyO39789vuL20nyLn13l5JJf9T9o9+7eTljs9+uf4z/6M9vL5/+",
	"dPKcDD6++HOWPSeDk5fXP0r4fX4bHv9jdvXnYPZb/233j8WITY5fdMO79O6P31/wP36P4n8ev717d/z/",
	"5u+evRle/vJqEf3+5tfw2c9/4v7P9N0/nw+fkAt5+cu7dPIP9n+24h1FdVswjGresRaISBkVRpuDjxI4",
	"xfELSxWv7MdtmMdtVng8HfVPe8N2bxqF7cHkdNIedYfQHkyh2zsZRNMwmhZ8M2VM70Wz9S7D6V90TIRE",
	"bIpucUwi5Pq4I9yccfYg3nGhZTERctANXxO9oN7otNvu9trd3utu91z/37tgG3bJUTPrDDpzMpsnkHRw",
	"r9vt9GadXnc2qcjtNPsZJyReKBqmEmL0T2AUXcVYEpol6Kw37L5Gf7u+WcT4Bv4etFQPEZwPlGwXN8F5",
	"v9sKZmmmxorZjIQ4fmLUkn4rSCBhfBGcDwetIGERxHoSIQkNJXp+2T/pqsNgvhClbr1WcAs0YkpuXDx/",
	"qmB1wxz375vvtFOU1m6wbaQ31OrJBPa2pxD9qND6J5vTTsTg/+IwgU7IEoXE6p73u/1Bu3vSPu697g3O",
	"ez2753PAsZxfSywVyu2fC0cMeDiYjvrDUft4CN324LjXb0/Ool77pB+NjqOT4WhyOimIIaMRTAkFRR8V",
	"B8kWdOVcGqoLHA/D7skZbp/BBLcH05NJe9SbDtrT4XQ6GZ0dn45OQtPllgjCKKGzfCH5jxCVaZGlQIXE",
	"4Y3GYMwyNU8EU5zFUuFM/fKE0SmZqd+fzdNw8aP6//nlL6/i8Pgfvy6DOBmFI4WM08FwEPUGk+nZKZx0",
	"p/i0Pzw+66oVCTH/FRYvEuxEiRHqujvujYanZ7h/1usPB6PTaIL7g8nJIBwNcXc4mOKgcMNoQM9GvWgy",
	"7ba7uNtrD2AatjEoQy86PZ0Oo+NBf6C2w3qcirVuQdNlEsXRetK2baFC3ItdSPtA2QfK3pGyt/Vq1JJ1",
	"4cZATu8wdK1010c4hPvd/nG722/3+697/fPu4Lx3/G5H6pxk/X530L7tdfonnWF7lmbtk/5J5+yk0z1p",
	"n4YQDXongzKx2NM04uRWGUdB3jqwp6h2Zlz0uur0/MX+p9/tBu9LR+eLt5dPLy/UsEwYtETg3C9sEoO2",
	"zYTkzIBIZRa0gqnTBCKYEKyMkxvgVB/bMaHZR219cIIVeq3Bon4CLsw29QedrlkK+QuekR+D8163FQg2",
	"lXeYw1vTToNT+AqD88CiRnW8JVxmOLYcrL65HxRDbSEpNV1skJC6DZJzLBHmgNQwWJJJDOiOyDmScyJQ",
	"GmM5ZTzpBGVv2UGIfgEhutahV5Gw7sJKAXLWH8BZOAjbJ2cnZ+3BpNtvj0bdYft41IXjwcmwN5keKyKO",
	"sV5rr9sf3Nf7Bz+zXMwJru60L3sV6cNsrwN9Huhza420oLlN+mjFeHYO8F3k6FfkARegl2aaWRdJGBOg",
	"slOoUE9BYhLv6cxY1lBONc91zwcn54MTxXPLIEqWIgEhB4nUQCFQCRwJlsDdHDggQpGcA3rz60Z+bXSR",
	"VfDrTfsOhNyShaaAZcaNS8n5BXJXzfkUxwLuWxXlwagSodOd3yWjWzWgpelSy+ZCt7ptdXQd6e8Qlb25",
	"ihhkfuteooFH01C/9v1v9/ZKAdbN+xCJZTdkvbCyjXyXWQfV7wscrdsearteHtVye7NLue+PNkR+7fSV",
	"UsZO944cU3PjBVSpVKPRqBUIidXHXnc4vN/rbWRToipfPy4N8X2q9Afaymnrq9yq6Nvbqm5H/++o+8DQ",
	"g/c7c3sDS8jD9h5N42DGfzO6xm7UsjWliEpsyneoa1QiYL4m6vjm4nEOsTWPF1ujj3NNI5+ClJNbLOHy",
	"qhzk1DFhDRap6sug3+mfdDvDYac3Gm4dnbNOgbThOE4sfKeK4kEwHATDf4RgeL+dZGikQuiGWkZklNww",
	"Tts63OBDyDh8SDChH9Kb2QeWAsUp+RCyJGH0Aw5DSCVEZXniyy4ywYFzLNAEgCLXDWEaoTsSx2gCaJrF",
	"UxLH6lexoOGcM8oyES86Y/oHy1CCFyhlcWw9p4JlPAQ9QMIokYwjIgUqs6L+aCQKMigfU8kQvsNE6lvc",
	"GMreWJYC18S7LRImOLIxwLupW8C5vosnVAcSfrDoClrmy4cqQh0yJyxaINslaHxUbLEsA5aHal6VIZga",
	"77YZ30RC6oW2EON2q0zriIFAlCnMU4kJHVOcb6bJNkFTAnG0NQ1OGZ+QKAL6MOznw9TgXckTFHLQ8SU4",
	"FihiejlzfAvVZSimJjHowIIvsS93WKAIKIEITRYIZ3LOuD0IWyZaQfHSBFCIM2EaKfgrDRWn3AB1K1Tc",
	"VFmjCFkKLnXo4uoy326NJrXX9IcCN2NKIQQhMF+UsIOYuVTQPBsBrwZRbIERQk3k7bUWYj8p/DyMFow0",
	"tJj2k4Ole8mQQVQYY5J83v2+oCij8DGFUIlSxlFG55hGCizdB7EwzDiHqINel3YdI8kxFQSotO0wjcZU",
	"fRVZGIIaiyKMOEi+6CB0OTVEQ/SWqg0LsYAWSmPAQpFEyrhERCIsdB6ZEBlsu4OUyZ9ZRqOHbRtl8sNU",
	"DVOzZyVxBFFxhuSSCT4SIT/vHr7RSpIioymhkca6gWpbDGbU8S88EIvqcBbig5EgNZhUcyk5aEazh8Bn",
	"pn4fCE4KmTVY1lRqB3xMldzqlKwqX0KCN5v8pbs/XAnx7xjlPwUu83TVOhXIEpvJq13KJ3cmzNqeqomn",
	"7305XfNfAcndse+LC9CJsmjUNCt5DZ70I6cSstplC50aLCERW+ZRlK7cMed4USRI+AAxX1ZxXLZC90Rl",
	"Sj0k4SuL6udugpIZtjmHwMZ/VLcjh9WO5NsU0/0fGfOng5nPJnpkFRk2tMVbsEH7rotgA6dl5Wi1kKjj",
	"cwbcxH/7h7IweInXR4AGqg2L/Y0IuY4AywtvTnJlbNaS27WLxWpIchPMQW1lvNrp9znIORixYyEmLsgn",
	"gkjJJ4hQgsM5oWX+nTAWA6YKplJyjQckDlrRStCTqzfIhN5WgkmgM+sgHfBrd7yFMA/nREIoMw5ecWOS",
	"c9YTzZOrN8JPJSajx9cbJ2rjVW9I55AAxzFSrRGh6NmP/tFsHPO6PZ2lmeGuIsln/eymlZ6VeKddIlqN",
	"j3xwu8J68hWbyXZbgvXR6izNnpt0qNXZnl29qWy6d5vdAJs4bXmw5sDnIPrB9/OZmk5JQzK1p/cqw1Vz",
	"xHybbVuUCPbZ1RuB8C0msdapsEACgLrQpZfXfvKrIyiNk01klOerrdkg784sZbN5K8fYJssr/FuIeST+",
	"XqzUD5gL8d+4f29Nw2WWsP3dCkvMUYW9Vd0rH9MUk3gXqjBlZlMrAZolan6bmdDS2X3vPShcynJaQ965",
	"gemIDhV9G1N6Nfdkldor3z3A1AKx+CwajnVrXyu7PXKKjoJ1W2XHQb2zulMZ4IGIqoRLN4Va6fPXJh6w",
	"HAe9pi5SqTyKOtxLrn1EqJe/zQ9NQgxfq5bLeNTdS8BtwmOxpJVl/HQLfCHnxh+K8oY2ABlRgEho+zOj",
	"oV8W20Q0r7aAE3AKpm7mpK35w8Tb+jWQci7bKhFMsIDhAAENWQRRZTg0JbFfqyld3SyPeGXLcBmkTQlw",
	"hM1thdKIrdVI6JRjIXlWrzgZz5Ap0+SZxnigbMTGhrnkxrlMap7XMvwpV6+ur39BN7BAM6DAq1OU2MY3",
	"+JW5fPgVFpvGt9cUeh7J0ES7+bTjcE5mSvllXDMs8FsSgvBO6LIKl2d6I4Dn8ni6277cr2EPU7TAZ9eX",
	"UgW1T+izyGG+o41ZWc6DZW8xygpinBe5KGeo98Fc5xohUi+PH0WaLq1zvVB0d5+ru62+fAPOBA3n7hus",
	"ej+zmaFeTcvkiyIyRUQdnXEM0SpWXFLphkFsSmfLOYitGpef3F5B4HJTmxkWv1mX7N7UWbu0WuS9vPaX",
	"lDS3g3SGxEJISMomuM8r49Jo1xn0qpU5QrUNf4e5XBxNCKM1mHOZuOtxwMRT0+6+yNTd1MO6H+6LTN5N",
	"PX417e5Lqb7rlmobmYVGIG4kS49cXIpnqXmy8PKgNjt46dK22BY9wdikGI+DzdLErjdHVY7lAoZaUqnR",
	"YGtlTQNPR86/eUb2xtYvryup1MvgPCeUJFli3DCqVeEJlEyd4+aIVSOtNXR96dlrQw+W23vSthus7m21",
	"y/L2uWWvjK3RV7tzb1cAWXbqYYlUV+1MMr67Mp70mVi2Vsv5562Su7AVYLrwm68m9XyN2bpl4nlTO1af",
	"kD4DNr0d2MpcXqK+vLodIGwaeHm2NMAmh1N5rG1s8BKInhXUVRb1APJr3tTcq6DnmZDmdtRUc3r64tpF",
	"Kijpwmi8QDG7A65vP1E4xxyHSjtqOZ8ZYhzNF+kcqGghHcqvA1BAh7jIOcJFJ9U099XSSM8rUcKERMPj",
	"0tiKIWOgMzlXKErwx9/0H8H58LgVJIS6P3u+G6VSTrgHAbU3WF+z76G0pp01pOUxfB6I3PNm2v4gNrkr",
	"l3O6G5OxU28aOzIsSM7oF86P4TK96xjXfM9NqtL2r1DO1+kSyaHK19paRrudY82uV9FWo+fZW89aDiml",
	"5fsQtDJC3Z0vZ5n028TVYUy7ulFENqEgN49i2tWN4uoGeK9VcoP87W8XL6ojFBcqBZLrLO4cH9+CvV1e",
	"y3pZs4bc1pjZX0TK7E1ILOGijiHXoGaj037rWINKEZRV5SA3izxzapWfTDJ9n+riLJxqx1l4o+wCW/7I",
	"p8vlBpTPBjI3tiagomKriA4ygVlykSpC0Pe6U0K1zgcoxeGNUjaVdodlBSKI5ljqLH5df8kP0q+5JbcM",
	"krF5tH5bHtbUbvINVipwoYOWy0RZuhFteC1vqNHnsyuXVPi1Ur1h2Uelz6DigoAaJKkf7+ZgXNBafScC",
	"jUt6obEIqwsoF4aoP/B+EMs+6ZIKabpn3IYi+f3Ty4ZnMe37DaioYxVXP+IzitFdtLbyUnZW21YGWcHH",
	"ZYkI8IRlslJjYxlH5QISm4H/2bVeKSvSdOElct7b9VC+hnqE/VxaZk1ZGjdKCV0m2N7cwyHJ7F2RWMXi",
	"aumNlV2Zqnmch5CaeBhr1JYmFFmaMi7FyqkoTHQqo4DEnGWxNpbK2qZ2Tps67cJ6NLRcVbZ6Hu+ITBET",
	"Maa+ORVjt7W97mx9YewyOQcBKLGmYWlWBRDCBbBaMQIZdsbUE+GzfFouI61++74Lzn8gz39Zbv9snPra",
	"TrTmAMpvxpdP7sJ6rIin97XG3Vq/U17VpqHiVSJVj961WjnFK4qqdVO+JafEygJ3pnf/SBvRtdlw+OLX",
	"civ1D65sfQVP2BPj0ujBRDO3ZNoAvUOS46m9U1qyx22NhtrR3BB+x3ZeiWOrAg5qAa90T68mu6Z9PZwa",
	"kgYL1iVDfKMAjdzFSDFgjTvf1BrxvgClfZeNxln2xutBWxrARmTQTB7YkjffrlCwK92TYCiP1gx3myWE",
	"KYyylfe9VDjFR0X55zwA3W6iO7SKYitg/uE7rlwdlq15M6jUa6l5mU9/rYgHB5wMU2XyR6kHqqUNLPBQ",
	"mtFC3jKIbbSntW4z39N334ILzb/C/THBWu/agQu+TS7Y6Bf0l0VqqKrWVF3boLU25sxvjSl39G7XjLGT",
	"orp+8C2pYVdCqCUC/dSlP6TsdR4NYMMonNe8iGpplhpoBmmYWuXfDjVhbQZj8ajnD6L+Usv7NFeT4hJ2",
	"3ouV/u7Swbdu20kLHSlxOC9hDkm2F0ysQuQhJK1oJ1ksSRoDen7x5OjyygUmoL9pvffvKFXYULCmWAgk",
	"55xlMxt+4a60lJyrP09WN+TJ5dNXPrukFCaHw9poDDXC84snOaBrBlpOdKoXxJs3cw0fWvLJIdIo24Ib",
	"1+9bLW/aLpug2/ouqcpSejc+XpqOPR15UfzhB+zKWxJnDWOaci9IUV/exWf52Zo6tVmILL+uRbgYtLPZ",
	"K+mGrieOemPNL/C+bvvMrcglFhZFeRr2M+03abL5wOvxWn+AWvrYoLkWVaLWpO9aFXRN2GUePr0ZB5cu",
	"joyWfP+NeSq/kfbyyeZhPPzlKTHVZKTrch8HVlE8ypeuoL644DB3LdjOU1Uqd4Hlm0nGkRnJ3VOgLGUU",
	"xTijoQ7wMk0Vjy4kbBTl+Za7bSttxQZiy0m9ntx0E8+FT1Gwym9NmESR0iG6meiKSlfeIQvB2HDE+9rF",
	"V/Z6Fz90nQ7nfef9ASrMKlE+ig68ipPak3aNDaSVtm/D9slX8gAvRHWMg8w+yOzHltkNrGBbvW8rzq81",
	"ez2R/jiK9HUMjq8qNLyvlClIbm1tieotr7aNUw55rpLLOcr/65jW60zYutDQahkAoMBJaCtlJSAEnkFr",
	"JRaf4UzO+x6F3T/qBZLABdhRDbEg+JhiGploc830v7x+fWWbKDrtIF3aTOhkAEXBkWv48iKTc9TvdPtV",
	"mdNCk8zkDpixwYaiKxg5AYn5wp70egKT6XdxdSkQszVNsJqACXDjmqzPYr6qK3O5fmG5KNUHE0QStFYK",
	"TGXURmKA6mtKV32wF+duTF1vLmgtV2aTkKSMY07ixYeM5hURSh3zWd0PM46pXJpV/+amLFcRU4IhJqHU",
	"5Q/knEUf1Fdr7C4NkkBEsBukqCbo8+d6Smp58pz0I/CW4my62cQV4tMjbFYy6ivYvX8YtxRRBr/hCcRv",
	"TQ1bz1v2OpmiFCoXq+ZI17ltlQIfdT6xor5KuSsbJxRiiiYwpoRG8BHyHHPF9YoNNNdhKYGrOf//v7rt",
	"0UX7HW7/9f5v/31e/NX+0Hn/qdsa9u5LLf7+3//lTVZujolyneE1dqlxsb2c6rq3jxuasxyhuVwJ2Rsn",
	"XmpTTlyvFFudQMzoTJ2EmylvadJVcnu/LOvdCor8tMmiCpcWAqXCfRzw9uVCN7sQHmOrGlLJ6uatqWlg",
	"r2+W6xrsvGXFVLvuloNmLxvlev9SKRHuQ0Kpxq9O2CtXUSyOp4zeUHZH86LjOtcTZhxHFa/XTkJgxSJZ",
	"TcNcwZcuERbH6rxdwpQpi8zNq9wrSQDrTo1KwcDSJxt/yVKjw8ULhLNZoojZBPrjxOoxCdOJhlTCR7m2",
	"UOGe+MJ7jty7eul7m0biWR51XiZ5Uyhxt72+8lR9r2HRoiR1Yxot9yr/qdWOCJY+m3N+T0T86MKwtkDC",
	"pxVaNyW6zRsCPuRKkkBV4pnqxzFIU9cgt88iLKGtmvuoer4kY/Z8QFdE2L3/wYC9T+qhT4/EX26yhItd",
	"TwIl2B4m/q1J6PWvJJhKEuYmoNUHTaGBXqffOe6M6RWHNgddo9gIVFuCwJhPuhB5xjlQGS9QrsQvqZK3",
	"43H0v8fjTuk/D1UXa2j/MdXDNQxWesTDx126mPfdnCHbrsJp/rJOlVc/mnOsnaA5x9Z5YjNK/p1trreb",
	"sEhbsxtXnqVRs5W7ETesHFfXbYdvum5vrdUyyhvwq6kF7pjW1ip1QFmL689M2HLYJhEiYvQH6Rh8TDFd",
	"bHhpwXgeJkBhSiSacpYgrD7RCPOI/AXRmOYg2AS3curETjapxN5SYhLPUILTVMPJJ0RyzBfOvGTGFDWp",
	"eCDAlKynzPg7cIwSwGqFY2pq3S9QzpNajmD9Nq4E7VtRTTIBSv4BjTQNmbv5SF+MWwfamFr9Sn/KMd/S",
	"3W09bp10gyXMtO8EEY9fva68jGUAteqaitH5kzM+ItWfnNdZ4tlms6HyjM37B2/hptsOpRk2dnRuST0r",
	"ztCSf/paDWkNau3sqxYgXwX5pXtPxPGNKPxmaAKY6+v6G6CoWk1dy4KY3Rm/a/lRhicsgpUf3/A4OA/m",
	"Uqbi/CgvE9ahN6IDmaIY/cDyoENFiGP9ONORgf/otn9UGSloBdpwUxMrTCjYHjS6HqFyH6c/mWRxQqee",
	"XNwnutCfzUiIiAjZLfCFli+cZSZ51lSZc8mzRLhf9KFeYUYTlGirwY9pmS87CNksUg6xqTZnCyDi2GZA",
	"FN4p+JiyasG7GG4hzgvejakuO/SEJWkmzaM0hcurZUSqS6cT2USAFCbRpiJ0PTVexlR/cUtWvEhkDEUK",
	"7LVd+sXVZali0XnQ6/Q6XVdYAqckOA+OO93OsdFv5pq2jnBKjm57R2XfhDj6VPHcPL0/KmqlerKw8m9G",
	"GqKYJETm74PYDMPyqyklh55x+klWHCVjWi315zQ7m9blZHSxMfZCBxHBzCY6UsChLkEu1FkVOb+EaLnC",
	"OYASWxbJ82pLkYFRhWZMy2eeoz91ehkreoIFEca2y69kI6bkjXmmSM1I/gKBuKmIbZIR4RZMzWpcwVMM",
	"WEfpzUD6LiWk1rCLrXEuFwU6rXjN1CD500b6GbFnIC9S8rb3srzvLyu7XuyrrkJqfPJ6//vdbp3Qzdsd",
	"lUvz2qco7lvBoEnXh727pGfp7XUW78Maep7jvc6z+ozRfSs42TPK1r2UUz7stBniP+b+9V4/T1eUh6w1",
	"WYomR1WZUlRm0kM1lEO0Nsf4Oaa6UlYe5oeQy611j95UvG55eS5EWbTkoNGCHOuE3s6YvmASjMjSBaAw",
	"EoTO4rwyhjolPFYkSouSposWwqLMqJjrmwx7SplqquVcuxR42+Yz1/K/0pEqQY1bM3iee7wLexclPA7M",
	"fWDuvTC3O6GPPrlbiIPm8YU1jz0RQWtj13zHy6TTClLmMwSfaEcRwojCXSlfmS6l/1cF4hUTGyWirRAu",
	"rhw0SzqQlkU/smhRz7OuCYHycwEmGOJ+RdD2GutRi4Og/S4F7d7E49EnRymXT+/zixOPh+ep/r2S6q8E",
	"BKaLkjGKhWAh0UJNCy3jfapylBnoATx1mQO8qoL097pbK2/UHphoFyYadAd7nWTlycevWiM6KB9fi9vD",
	"mWDlRwi2Nn92FEzdw5F9sI2+pFq8uVehCDyKIVbRNP5DXTLfJAU0sqdK2eF7NaAKmVrxO21pUuUFXh9g",
	"UeVjHKTzwaDaVswdfXKlv5tZWet5ao8mlOOqFw68g0114KM92jv/cRcsxtJYrkX7eKZGAwbuHg63g+nx",
	"7Smem7vlZ+pnMFhMIXvv86C3JAJhhYN+GVW3RYkWfQlQ2VKyRDt6TEa2dvXcETm33pqKR3VOIhhTk0Vp",
	"q2ebKEjA4dxkV3YQupjNOMxs0pVAc0yjWMksjqlIsZV6k4V5UZVRyVkcA++M6ZWOa0Y0l55mYSjElDJd",
	"rBrolPEwF3dEL0DLXru8C+2OwmGo4cZxvBjTTID7/OMPolyJBqEn5ne1bCXGS+DeEmyiBXUwm8h04F8L",
	"CYaI/EGMKUmU1MZUOi+YWoQwnrBSQFfuvGrpQC4XqWWGFbWi+sJC3M5fA7DuN4sS32uojyPE/2GIaxfJ",
	"bWA9CO6D4P6qPAaZ9D1xLFekZBMuu8r2zmVb+g8ck9W5Dw4m0oGpv7SrwU0/y6uh+C2x5Zo/6LpagQiH",
	"Uii7CCP7MiWaEg53OI41q+pyGjQ0lz5Ws0DKapqwTN8HR4hl0vxRLkP+3Xo+Vws/PZID9Lq6wTuIsaXS",
	"pQ9whi6NdJBTBzm1m5w6+lQhpabu0U1Mt0cPaZXtrqvQHrylBxZ7BG/plzmj10VObOC3fRnCWzJb93BS",
	"Hdjo+/VvLh2NDUzsNzopXDTg2H0Z1Zs59nGU1MM5exAQX7sqe6SfGGlsitsXSb7gYa+zw/xQfZkjX7/r",
	"sodz3zwPc+Dtw+H/nRz+2/ql8tejPotzqpaLH6QL6EeX9ua00qMdJMLhtN/vaX/0Sf1nNz9WDZN+LmeW",
	"OSU19Ae/1oEDH9+v9eUVXp93q4YLP5++W8eC3cMRd2Cw/1Sld3Nfc+5+hlBA+2bGOrs+f1Tje773du/K",
	"PJpJYdC8k91gXil5kLFghjiIz4OFsKVgUKaBfjOpsRHg56S96v0asmsL10G9P7DPo6j3+bm3Vtv2k/v+",
	"FOwNtN49SP+D8vxdKs+G4ndTgU3JEI9Wa+rFChTBlFB1XumtctU8bBLfDNiM43Suk95sveuYzfSfKeZS",
	"V7DujOlPRCe23OGFfViEmFIgKScJkeTWJqUQkdc6yWsKFZXHRRbOERZjWpk1ZiGOobVcxfQHgTho1ERo",
	"ErOJrq9iy+2CDBVMOJy7wsFzLBCRArE76uruck9Zo2rJ7Zcp0GuJwxtd8nxM3QCeai6CqWXTmXAlXUrV",
	"V1GRhxKT0Lz1MaZijjlEBun5C+J3cyzhFjhKIJxjSkSiUJa/YmZed8PS9nILWX/vZx5e0Hu9k3C2dLKT",
	"vLXzfglReKiluCIDjj6Zf6ifIpCYxD6pIDmBWxAIRwmhbVPW2pXf1p1EZ0y1jLi4ulTkqTNr82eEBCjg",
	"JZjkNl1hCBNqirVbOHRHlzo3phktjaDr/eAZmEcsqTDCo8RqG7QQA6LOQYM7V7W+rgpgc+p/ZRH31KBt",
	"d14wAxxqgn2XNcE+m/7h+Hhv4gA+GhzU1++5iGN2J2zlfMW948B1yqsAjAN9frpzyRY5s0n6ihOTzpj+",
	"PicxuNMyJjeAnpjcey0W1PFJ6NS+Wrc8gzrDIZ621FmM7kgcowkHfIPIFBGpeF9ZEebJMv1SKaPQsmez",
	"SV69UwqIKQEwpvAxjUlIJCIUsYwjATGErkL6GhnjHp5YWf8+JMxPyzuxi6xxkL3w1mU+yJuDvPnC8sY8",
	"e+0RM+7FDPvYuXtPY62Kq1k7V/7t0PvgxZ8tlLuwoAXj+/U1HNhi/2yhn4BfwxX6+y5MYQbeB09cGhB3",
	"qoSpux444sARNRzxdec6Nw6t3onNPGnAD4oSOcRFH7zc+/IfbRMZsY5L8kY7cEcRNLDbpc+BHw78sIEf",
	"7u//JwAA//8FYMskwg0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
