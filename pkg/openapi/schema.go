// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
