// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
