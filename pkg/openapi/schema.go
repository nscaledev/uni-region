// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
