// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9jCFXEjfwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
