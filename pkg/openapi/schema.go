// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
