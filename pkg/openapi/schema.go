// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4kRyu4jyXh728rBGHu7v/ycAAP//2GfoP2QAAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
