// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7j+GdR8f/zcAAP//DBP4glVjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
