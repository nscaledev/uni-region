// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
