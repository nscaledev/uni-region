// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
