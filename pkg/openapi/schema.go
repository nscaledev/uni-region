// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
