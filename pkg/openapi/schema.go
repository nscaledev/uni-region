// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3MbOa7oX2H1PVWzW1eSJVmWLX8515PMwzWZxBsn2Xt35JuiutESxy2yl2Tb0ab8",
	"30/x1Q+JLbVk2XmMas+pidUkCIIACIAE+DkI2TxlFKgUwfnnIMUcz0EC13+RCKgkcnH58sr9rn6OQISc",
	"pJIwGpwH72aAXEP7j5gA7wStgKjvKZazoBVQPIfgvAQyaAUc/p0RDlFwLnkGrUCEM5hjNcR/cYiD8+B/",
	"HRXoHZmv4ug2mwCnIEG8xnMoMHt4aAUU5D3jtxsRtu0245sDfBJ0GZ9iSv6DFWZrcb6gqNwWXb6swbcK",
	"cS3ScpGqHkJyQqcanZSzPyGUG6ln2yE1Zg0eOagnoRuH6SaKKTxNs82L7MA9Da5ZAhsxFRBmXAnQlLMs",
	"RapPA7Q15CdB2uHzi0JnW+w3Ir4E/YlmwO+AN0BdNWuCsgH3BLg+GJAg5I8sIlDRvG/NB/VTyKgEqv+J",
	"0zQhoZbxoz+FmsvnAD7heZqA+uccJI6wxB41gu6AT5gAVP59RTm39d+tQOKpCM7/+Oy+h0kmJPA2iYJW",
	"cIeTTP04Oh72Bt1+2I5Ho7P2YBSGbTzp99qjyWQ0wnEYR3AWPNyoJUkhVDhZcYsUxNOT4Rn0o3Y8wpP2",
	"4OQ4ao/wMW6f9I5PT+LTs0F/ODHL2YjIbgL/5ESCIe0yASypUcw4wjTfuTorC1vsJs+7CHbQJ16DiGo+",
	"NGytBgjOOvp/wY3aByAmn4LzoDfqd3rDs0630z3qD7ZYCDuJpuvg9uNO8NAK/p0xicVORI8TfMe4oVfI",
	"MtXnrBUQxWkjfBYOj0+77UF3eNIeRAPcHkW42z4dnp5F8aAbRqPIkqjRDA2W14qca+cnGRIgkWmu51fR",
	"fs/LW27otlbUT8JijQlYIUNjRqluNR56Zgl8UZqqTdkQtiRtIYm4EqdTJU5amnr9oBVEhENoRyF0ykGI",
	"oBWkjGuEaTafqG3rrGtMM8lClgTngQzTYEcyK+rsSGptk1h6K53x3ERWY9YxrMRT98mxq/rJ/Lui9oyC",
	"uGysEFoBmeMpmC25sRbJdw6D5Tb6pxWk2SQh4eXVRZIwQ0lNRIonSWlrqizr1sO0mreGLYVardMWLKaa",
	"d6xNL1JGhbF/4JMETnHy2tLxrf24Dbs5koTH8ah/2hu2e3EUtgeT00l71B1CexBDt3cyiOIwigtOixnT",
	"y9Bsvst4+iedECERi9EdTkiEXB+36ZldwW5dO060LFghB93wHdET6o1Ou+1ur93tvet2z/X//SvYZlPM",
	"STPtDDozMp3NYd7BvW6305t2et3ppKLp0uxnPCfJIjgPLqmEBP1fYBRdJVgSms3RWW/YfYf+dn27SPAt",
	"/D1oqR4iOB8obShug/N+txVM00zBStiUhDh5YTbyfiuYw5zxRXA+HLSCOYsg0YMISWgo0e+X/ZOuUp+z",
	"hSh167WCO6ARU/r34veXClcH5rj/0HylnWmxdoFtI72g1rIksLc1hehHRdY/2Yx2Igb/B4dz6IRsrohY",
	"XfN+tz9od0/ax713vcF5r1deczwcxKP+cNQ+HkK3PTju9duTs6jXPulHo+PoZDianE6KNc9oJkDxQCWw",
	"sAXvuECA6gLHw7B7cobbZzDB7UF8MmmPevGgHQ/jeDI6Oz4dnYSmyx0RhFFCp9cSS8UfxY8QlfmNpUCF",
	"xOGtplLCMjVOBDHOEqnoon55wWhMpur3X2ZpuPhR/f/s8te3SXj8j9+WUZyMwpGixOlgOIh6g0l8dgon",
	"3Rif9ofHZ101IyFmv8Hi9Rw7ddEKMgFmU8G90fD0DPfPev3hYHQaTXB/MDkZhKMh7g4HMQ6K4IVG9GzU",
	"iyZxt93F3V57AHHYxqDcn+j0NB5Gx4P+QK2FjdQUc92Cb8tsiKP17GvbQoWBF7uw74F7D9y7hnu39edr",
	"Wbdw4JGzHwzvKqvtCTbTfrd/3O722/3+u17/vDs47x3vypqTrN/vDtp3vU7/pDNsT9OsfdI/6ZyddLon",
	"7dMQokHvZFBmFrsrRpzcKbcgyFsHdjfUbvxFr6t2wV/tf/rdrvLo8y3w9YfLl5cXCizThlbsNuuXMCG4",
	"ZHG/n2RUZuhaW2jKsAYuDNH7g07XIMZieY85fDCfNLwizBWcB3Zuqu0d4TLDiRVB9c39oCRiC3WmF3aD",
	"GtNtkJxhiTAHpMBgSSYJoHsiZ0jOiEBpgmXM+LwTlAM9B033RJpubbypogbdiYtC5Kw/gLNwELZPzk7O",
	"2oNJt98ejbrD9vGoC8eDk2FvEh8r3kywnmuv2x881Ievnll55UxVt+2Wg170cY7OgQf/Wjx4syUTNjD+",
	"Kt6oi8Huog+/oiCsAD0108zGHMKEAJWdwpZ5MjPhVMtU93xwcj44UTK1eqb7aTFnnFESIkmAt4+RAhgC",
	"lcDRBAuIEKHoldrwU8aSjpPLRscmhVzetu9ByC2lJQYsM27CMc6nzsMcLgz1GNa01F/PlbaRL3B+2Kuf",
	"SE9uq6F2DUbXqqRmQf5vdv1FHq3+Shlgp+MKjqkJlANV2+BoNGoFQmL1sdcdDh/2eojRlHfKpxZLIL5p",
	"U+vAQjkLfckVib69Fel29P+Ouo88f7zZWXYb2KIeIfaYAAdn6asyAnbjiK25QVQOob9dI6Byov01McHh",
	"fP3Zz9f1NqdX4nOQcnKHJVxelYIHvY452rSoqy+Dfqd/0u0Mh53eaBhse0K/zn6yR/JOxr5tO+kgZQcp",
	"26OU3WwnZo02N91QC1xGyS3jtK3P/T6GjMPHOSb0Y3o7/chSoDglH0M2nzP6EYchpBKisnD6LsCb2zYz",
	"LNAEgCLXDWEaoXuSJGgCKM6SmCSJ+lUsaDjjjLJMJIvOmP4/lqE5XqCUJQmSGqJgGQ9BA5gzSiTjiEiB",
	"DGl1jE2RIwGFxrazmuDI3ivbbWcHzvUpF6H6qs1HO/+gZb58rFLIUWfCogWyXYLGinSLaRm0PGzwtoxB",
	"jIlaAwPf3BXSE20hxi3tTeuIgUCUSaQIgwkdU5yvjrnBjGICSbQ1U8WMT0gUAX0c9XMwNXTPBHAUctAn",
	"tzgRKGJ6OjN8B9VpKCklCegTvy+xLvdYoAgogQhNFghncsY4EXZV9DGiEo4JoBAra141UvhXGo6pZLdA",
	"3QwJnVbnKEKWgruOfnF1mS+3JpNaa/pDQZsxpRCCEJgvStRBjOoueoOJgFdPN7egCKHmbpo59v1J0edx",
	"vGDUm6W0nx0s30uGDKHCBJP58673BUUZhU8phEo36maIhWHGOUTVhcaVlpJjKghQaftgGo2paimyMASI",
	"1LpgxEHyRQddxgYS0QuqlivEAlooTQALxRDK8UZEIix0ZoIQGWy7fpTJn1lGo8ctGmXyY6zA1KxYSRlB",
	"VGwJuV6CT0TI513B99qyUEwUExppohustqVgRq30/gceSUW11wrx0eiPGkqqsZQWNNDsFvDMvO9Dwekg",
	"MwcrmMqKgE+p0lqdksfhu7DrzWB8406JVq7AdozFnAKXeQJUnUVjmc1kQC7lMDq7f21Pl7W4mv9YJAD9",
	"EZA8tndTHHNNlBughlm59+u50O4sPFY7baEP9CTMxZb3jIPi6A1zjhfFBWIfIubLKo3LHtqeuExZgSR8",
	"a0n9uxug5LtsvmNrj3Ory5HjaiH5FsV0/0fG/AkG5rM5DF4lhj2p9iYL60CoWsqqjZWT1WKiNs8pcHN3",
	"0g/K4uBlXh8DGqw2TPYVEXIdA5Yn3pzlytSsZbdrd7WiIctNMAe1lMlqp3/OQM7AqB2LMXFn9hFESj9B",
	"hOY4nBFalt8JYwlgqnAqXT73oMRBm1lz9OLqPTL33srJJgg60w7SF+nsircQ5uGMSAhlxsGrbszl9fVM",
	"8+LqvfBzibnx7uuN52rhVW9IZzAHjhOkWiNC0S8/+qHZ+4Hr1nSaZka6ikvw60c3rfSoxDvsEtNqeuTA",
	"7Qzr2VdsZtttGdbHq9M0+92kC6yO9svV+8qie5fZAdgkacvAmiOfo+hH3y9najilDUlsd+9VgavmUPgW",
	"27YoMewvV+8FwneYJNqmwgIJAKqYQMnmm2s/+9UxlKbJJjbK8znWLJB3ZZayPbzVCmyT5Rn+LcQ8En8v",
	"ZupHzF2d3bh+H0zDZZGw/d0MS8JRxb1VXSuf0BSDeCeqKGVGUzMBms3V+PbGb0tnv9x4SLiUIbCGvXP3",
	"0jEdKvo25vTqne5Vbq989yBTi8TiWSwcGwu+Vl575Awdheu2xo7DemdzpwJgK0K10P2MJCbWYq7DoRBT",
	"s8z2wpXypAiNzX48pmrwFrpXPp5yXi2qwji0mConUGacKu/VXrGG4kI+Qu9m2AyhXI0xnejghr7bpntJ",
	"hiKQwOeEgkItnK0ib7wTyZDytKwFUF3syg3OppRXPsm1ublWvpq5pppIqWiAMlBKMX1EqFdHmR+aXIZ7",
	"p1ou84LuXkJuEy8UU1qZxk93wBdyRuhUTSNv6JiAAkR65eOMhv79xCapeC0ePAdnJOtmbscwf4Q6j8Vv",
	"RZXzXFYZeYIFDAcIaMgiiCrgUEwSv2VWOrNZhnhly9cURT8QNscUyqq3ni+hMcdC8qze+DOxLVPExDOM",
	"iaGt1ETxjiU3jmXSdrze7U+5iXh9/Su6hQWaAgVeHaKkI1eAuwSgZcDvRV4aRZJ4NzI9rOFWkyfsCxWU",
	"snp0mOlZVDvf0W2tTOfR6ryAskIYF5YuqnSZ8xZ9empkun4vfBLltjTP9TrKnUGurrb68g3EJzSeuy+w",
	"6v2LTeLyGm8mtQuRGBG1kyUJRKtUcflfG4DYfK2WizlbyzDfT72KwKWRNfNVXtko794sZDu1WuK9ufZX",
	"RkuVslMCIBZCwrzs1a/SL84jBOuwZcJGEmpjij9nSVLZ81bQ0AGFcfAWImX+/EQl8JQTAegVodmnceBd",
	"gjzPbnk8m2W3aTSdneeFvUR1Swc7vWLgWurX2Jm14tsgHpGLRJ6PuLH1m+u61MO1x/HL7T0piQ0G/1Dt",
	"ssLI1c96TrXk/LAy/HI8DEukuuo4jAl7mS1X9baxsbKjV86obJUiba0A04Xf8zPJlGs8vi1TKZu6gHon",
	"8Pl+6d3gIor0RVQfp11e3Q0QNg280lMCsClWU4a1jftaQtEzg7oybx5EfsubmiMJ9HsmpD5jtIVCXr6+",
	"dkf8Ss4ZTRYoYffA9cEhCmeY41BZAS0XbkKMo9kinQEVLaRvTmvnDPRlDzlDuOikmuZhThrpcSWaMyHR",
	"8LgEWxnxCdCpnCkSzfGnV/qP4Hx43ArmhLo/e77DmFIGpIcAtYc/X7PbXprTzpbAMgyf8z5bmJiVafqD",
	"2BToW05ubMzFbhdv7D5blJyrKZz37FIe6+TWfM89h9LqrzDO1+mI51jlc20tk92OsWbRq2SrMWfseWGt",
	"gJTyU30EWoFQd1rKWSb9rl8VjGlXB0VkEwpyMxTTrg6KS6D1HkjkfueHVxevqxCKo4iCyHWOZU6Pb8Gt",
	"LM9lvapZw25rvMkvoWT2piOWSFEnj2soszHavfUhfSXhf9U0yF0K3+GkOY40twUqdr3Q4VMilCmoFksf",
	"WsaEaqsMUIrDW2UOKvsLy7I5aNyOoOUqe/gMwFL+tL4TW/GTihO6hsfEZpF9AR+jOX8uZRTXZGq7pGMb",
	"QNZ6Xt8/NeFgJJmNVYpV5lxNUl4e5jJW4ziXmJozZWvdlgYUWZoyLkXp5MiCNBe8GAUkZixLtNVU3nd0",
	"NMZUz9Rx1MxGv5XRniYkJCaKPQOuDPgx9Q06wQLa2nJ3Vr8wFpqcgQA0t0ZiaViFEcIFtlpHggw7Y+o5",
	"Jl+WnGWq3dSuX53AmK/Pqkt3sdwMmjsbbaXuq4xFjfxps2TCsjI7eSIQJTnYjHAuNXs7ScjHr5/mOztQ",
	"nfH1gyhOaBSIsuIpDMmbWtNurdOZ5/w31Lsl7vSo3dWcc6/6qWacf0seycoEd2ZxP6SN5NpsN3zx2PNK",
	"EuqVTXL1XBdgXJotlrgjR2V+3iPJcWwDp0vWuE2UrYXmQPgvGORZz1tl0aoJvNU9vTvumvb1eGpMGkxY",
	"p2f7oACNXHyyAOiftc3r9tbk14GLRnCWeMAAbWkEG7FBM31gqwh8u0rBznRPiqEMrRntNmsIk52+Veit",
	"lL3u46L8c35x0y6i26eKjHcw//BtVy4ZfmvZDCpJ8zWvqOivFfXgkJNhGrSCLEo9WC0tYEGH0ogW85Yh",
	"bKM1rXWafY+TfAsOtH+G+xOCtb71QQq+TSnYGBbw16ZoaKrWFLLZYLU2lsxvTSh3jG3VwNjJUF0PfEtu",
	"2JURaplAPzrkvzfxLj8KNIGGPGjmMvibptQYIHWxXUgglJtP90uoXrsuNYbpakPvwplv+Ts9/jNmVnP7",
	"/s21osocy3C23Sm76mw/roOwxK1MbDhAN7OuTY4qXqL6QWyXE2VBau0pJQ5nJRZAkjXJMtmI76aT1K0D",
	"pVVqPOhjxUvTsacPFYs//CJx5a0usIamJqcfXV65owTv9puXJ6jNTWH5UQTCBdDO5jCbA11P7HpXxC/O",
	"X7f34Wbk0k2KygsN+5n2m+y0HPB6utZvD5Y/NthlRcGNNUld1sAq1st/32ILTVqtwbGFTOXHLV452QzG",
	"I1+eah1NIF2X++QHBJV7SI62jj6lOW9Y1Zyn6tdVN/GcFRTlP/xGqf6s9YUxtRusblE3xAuy0EANIdbv",
	"nhWi7hLOrDMFluzJhmmKN80Q3bSN7G5KrdKk1phaY0rrLfPbMKHzmTzCma3COCjH70g5NvBabNGhrUSs",
	"1k3xXMZcOh/TLkbKIb/XnBvZ7r+OaVf5q/ykxP4ugsP8DmpclK2rKqzmPAIFTkJbFWQOQuAptFZuTzKc",
	"yVnfY4f6oV4gCVyAhWokB8GnFNPI3A/UIvbru3dXtknIIuggXcVF6OubpqS4bfjmQo1ele4WmmTmpqeB",
	"C/bioMKPE5CYL1ylJwXc5B9cXF0KxGzytk7yYgIcXFMVx4xVjTstl2gqV974aE75g9ZKFY2M2pNyUH1N",
	"htlHe7DpYOqSOkFrufiMhHnKOOYkWXzMaJ72WeqYj+p+mHJM5dKo+jc3ZLlUSshonJBQ6hxPOWPRR/VV",
	"B7VWUJ9DRLADUhRM8gXfPHVDPHfD9duJltPsBfiJqzWkIWzeyuuL9Nw8TkoKCX6FJ5B8MNXtPE9A6muv",
	"v2UTMNdiE9Ua6QJ4rdL9F507qBivUtLD3uMIMUUTGFNCI/gEeQ6aUi2K+7WwYSmBqyH//x/d9uii/S/c",
	"/s/N3/77vPir/bFz87nbGvYeSi3+/t//5c2eak6IcgHCNV7W+ecAJ8mbWBfEe9qbE8u3fpZLJHpv9JVf",
	"oi8ltlXqw00gYXQqkGQNwifVQVe57WY7Mm/2Y5+Cwg0Xd5Xma1IVy6/t74PSxVCPJvKK9epJV7MYur3d",
	"CrgO6SWJ2jeKWXDAkUklvufmCbqVy4frNGClwk/pk73sxfQfWnvgbDpXS2wuGOK53YvnTKc3UAmf5NrK",
	"QnviFq9OfHBVQfc2jMRTr2FpKhvttuJXntqmNYybt9NWg05lKZfmKsyBjN5Sdk+XKqeW/9RbaARLn82e",
	"dfM4tcyfS0XUph9+XuF1U0DTFMT1EVeSOVT1gClWmIA0WYPmRlpwHkRYQls1r0mT9qzlnvccD8N4FNNy",
	"E4+Gam2pYbRS2bYCnHUNvB7xHFNJQue0LBkTd+Nx9L/H407pP481GGoY5ikNhDVcWSrj7GNJXbDyfsaQ",
	"bVdhT3/if6Xuc3M2twM0Z/O6gFdGyb+zzVXl5izSrszGmWdp1GzmDuKGmePqvC34pvP2VhQrk7yBiOm7",
	"57l42YpcDilrc/+ZCVv00dxUrhQJGVNMF9W9QLWZAU7kzDqTxu1UZn9MJIo5myOsPtEIa3dwTHMM7EX3",
	"8tXmnXwSiafeNATMJ0Ry5edKPDX2gUJXOyGeq3/e1OALx1cOhP8M0u8G6RNI9cnFzCSebjbsKoXDbx5N",
	"mk2xWmWlNI4ebbkqKxGmUnTtWoG0nooOnlSrV66i/MakUzBa1KyxcY8JYK6P9G6BomodTi1fCbvX47ig",
	"hP7ygkWw8uN7ngTnwUzKVJwf5dUgOpVpdxifHhmUj+76R5X+QSvQEQs1nJq8wmgHmLpfJaKlP5nEKEJj",
	"tkqdF7qUir1/GxERsjvgC1PQh2UmCwX4HbFKjMhEwS0lrr41Xa9NI2XRV56K7XZ6nZ5LLsQpCc6D4063",
	"c2z2zZmm7xFOydFd76jsPomjzxWf8OVD6R3r1Wn8jimeKl/fXR+2SIsOQpd5v1LOhiB0mmi1bdLmsfvF",
	"Jm+Y+gs0hM6YagWYkDmRAk0SLCTiOCKZcJEFuANTKw+XalqjBPCtruRMKBJsbmr9CoTvGIkEmmRT1X9M",
	"qyayjaMqWk9B+sKKUps1+Tvdpni0rp2MacUvVzCY4339UsAvIC9S8qH3pkznNxUqF7TS9YZMcE3Tu9/t",
	"1kl53u7I8+L9QysYNOn6uBrxepTeXkfxlgHW4xzvdZzVkusPreBkzyRbV9W7rF21OenXq3/c6PhAUXmm",
	"1vQsmhxVZbhIhtegGso9rc3mMlIviusnCLkkJletu6jVyjjKKyIgyqIl79RqgQ+vLl53xvQ1k2AsG51z",
	"n2sHlz1KBNK1walMFiiP6aK0qJa0aCEsStXxEOY6JilBx9R1GTO1laouKYFQb/artZS8WkDtzZU7N1vL",
	"eZ7rtYuUr7xUfJDxg4w/TsZtVFIcfXbxyb/ehr8nqrc2ds1JXF6rVpAyn8X/QjvaCCMK96XsLLqU31jV",
	"QFdMbFRBtgafuHLYLNkeWvh/ZNGiXkhcEwLloqLmNPFhRbP1Gtsvi4Nm+y4129700dFnxymXLx/yaK3H",
	"lX+pf68kNirXCtNFKYKChWAh0VEjfRBB5KpEGUCPkKnLHOHVPb+/19VaeZjqIES7CNGgO9jrICsPw3zV",
	"Jshf2L13qJYLeW5t4O+oCbqHPfJg/X9JO3Rzr2LnfRJXo7K1/7VjD98kIzTyY0oJVnt1XArVWgmwbOnK",
	"5FWkHuHJ5DAOSvrgyGyr7Y4+u/KCzbyb9TK1R9fFSdVrh97BlznI0d79jL/egYLxO9LZgoiw+ibj0zge",
	"DeS4e9jjDo7It2d/bu6Wb63P4L6Y6p7e92/uSARCKYu2ffpHt0VzrQHnQGVLqRQdFjF5e/qR6nsiZzYs",
	"UglozkgEY2oygGx5TnOJC3A4M5lBHYQuplMOU5s1INAM0yhxbyin2Co/+4J2yKjkLEmAd8b0yjyQTHMl",
	"aiaGQkwp08UwgcaMh0Zj2hm1jAq207vQeSE4DDXeOEkWY5qJ/PWrH38Q5cIACL0wv6tpK21eQveOYHMr",
	"S98bEpm+YNVCgiEifxBjSuZKeWMqXTqKmoRA+smr0n0ahQvLqBQt82IyjcwlQg1W1KrqC4txO3/TyxZO",
	"tSTxPffzNEr8H4a5dtHcBteD4j4o7q8qcJBJ3xteckVLNpGyq2zvUrZlGMEJWV0U4eApHYT6S0cc3PDT",
	"PGfe75AtV4ZA19U6FTiUQrlHGNk3cFBMONzjJNGi6k57dElua1kg5TxNWKaPYyPEMmn+KNc8/W4DoKvl",
	"QZ4oDnpdXeAd1NhSnbRHxESXIB301EFP7aanjj5XWKlplHST0O0xUFoVu+sqtoeg6UHEniBo+mX26HX3",
	"KDbI274c4S2FrXvYqQ5i9P3GN5e2xgYu9nud0yoaSOy+nOrNEvs0Ruphnz0oiK/dlD3S9cwbu+K2/PkX",
	"3Ox1NpQfqy+z5esi8nvY900t+oNsHzb/72Tz3zYulT9V8SzBqVopfpQtoF942FvQSkM7aITDbr/f3f7o",
	"s/rPbnGsGiF9rmCW2SU19oe41kECnz6u9eUNXl90q0YKn8/erRPB7mGLOwjYX9Xo3dzX7LvPcBWw9GJ7",
	"nZrLK8J/z+fe7vWBJ3MpDJl38htMif1HOQsGxEF9HjyELRWDcg30yxqNnQC/JO3V7teYXVu8Dub9QXye",
	"xLzP97211raf3fdnYG/g9e5B+x+M5+/SeDYcv5sJbApQCd/LA/qDecZf7VemXipCppqxyeWbAptynM5I",
	"iBOkXxldoIRN9Z8p5lI//98Z05+ITmy5xwvzlgAxTweknMyJJHc2J4UI8y6JZEVFn6JussjCGcJiTCuD",
	"JizECbSK2p1CT+0HgThoykRokrAJYrF+OiiTgECGCiUczlzZ1hkWiEiB2D01KYgRcE9RoZYORMAnPE8T",
	"QG9SoNcSh7e6YPOYOgA2m6SodCKQYGradCrs0yrlmqOoSENJiMk5xGMqZphDZGiO5IyzbDpD9zMs4Q44",
	"mkM4U1OdK5Llj/CYR4mwtL3cRNYf+5kS73qpd9LNlk12Urd23C+hCQ+lA1dUwNFn8w/1E3wy06mv3nGR",
	"JOxeIPO0lGLkceA65cm/40ALjGNEW+nc5uYqBTDvjOk/ZyQB9OLi6o0WDkJj+zjLMjgloZDELUQkCjlO",
	"BWKZRO0xxToLD2UiwwlqIxKbh0j0O1qMgim4ntGohe45Dm9zeaZqRjrbWNcwygS6ByQkSdSQRjpNxpoa",
	"UQcmtajiBAnK7uME327KB3alvlco8xhRe2tX6aflNdpFBB1mr70VSQ/FwL6TYmDPZvk4FbI3TWReb/Qo",
	"oBd2N7ePY+b1zNbtdjpDNbcDLGijlZTGKVWwB5tLqiyDXMftQWh/ttPZRVYtvt+ve3KQn/3Lj37ydI34",
	"6O+7SI8B3Fx49rHlXZrJ7FR0T3c9yM5Bdmpk5+tOpGx8b3MnMfPkGD7qCPpw6fIQQtuXd7rNses6Kckb",
	"7SAdxYnkbhHlgzwc5GGDPDw8/E8AAAD//7CGu19I+AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
