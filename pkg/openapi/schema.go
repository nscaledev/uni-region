// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RR4eHv4nAAD//2QggfBT+QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
