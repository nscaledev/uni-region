// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
