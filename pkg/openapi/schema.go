// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RF0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
