// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
