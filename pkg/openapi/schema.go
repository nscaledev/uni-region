// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G8ntPMp7ftjzwxp+uL//nwAAAP//7VUFTxj/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
