// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
