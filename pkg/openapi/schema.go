// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
