// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
