// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
