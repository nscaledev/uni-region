// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbe4/bOJL/KoRugbnDWW752W3/s8hkZjONeaQv6WSBjXMBJZYsTkuklqTseBr93Q9F",
	"6mnLbncnub3FLTCDtCU+qopVv3pR914ks1wKEEZ7y3svp4pmYEDZX1KtqeB/UMOluP7hpnqHrxjoSPEc",
	"33hL74Ug7bHk+oehN/A4vsqpSbyBJ2gG3nJvRW/gKfh7wRUwb2lUAQNPRwlkFHcwuxxnaKO4WHsPDwMv",
	"V/J3iMxJSm4TIOU4gnseoaNe6iQJf1IQe0vv3y4aIV24t/rirghBCTCgf6MZNBQhoQrWj0kM6XTDCGcg",
	"DI85qCPEVst9A1of3JKgzfeScbCn7ugxuzfuBT6KpDAg7J80z1Me2QO8+F0jL/cefKZZnoIdmRbagLpm",
	"3tJbTOajaTCO/HixuPKniyjyaTge+YswXCxoHMUMrryHc5moyPqr4gYc6XtKSEpWSCwVoZVgzW54IDjH",
	"t86l0I7nkLKS3Tfl46exDUpJ5S09LjY05exTSYk3cG8+dSmt6Awl25FyyvmCcHv1COBNe9mY8hQYcZOI",
	"3cJSPyBSEWO1z41mEjQR0hDklnKxEjRN6xEoMxJzSJkeIonw2YASNP0NzFaqO/0ccX1AHfOWXjSJF+PL",
	"0dwfxSzyp+Fl6C+COfjTGILRbMriiMWNFcRSeg8fzxbSHp39CpNybYiMnXhINYeIcpLlOE7pRqrnMpqB",
	"oYwaS2+kwA685Zah0eIy8IORH4xug2Bp//sbAoA1HXoVzSeXgT8N5jN/yqbUXzAa+JfzyysWT4OILVgj",
	"mvVwOkz4OskgG9JREAxH6+EoWIdWp3KI7OZ5ob3ldOAxru+85TgYeOu8cNwUyMto4GWSQeotvZ9GQeAN",
	"vA0IZrVabDjjFFfLIJNq5y0n44fzz6KU4OkjKAc5kUsVcsZAfJkx1sscMcNCgyKRAgsTNNWESWsICd1A",
	"1wByxTc8hTXor2imW6oJA8GBkXBHaGESqbgujdQkXJOM7kgIJKKFdoOQqM7AlTDyDkRFNhfrLuE6kjlU",
	"ePji5rq2fss7mr74rmF4JQREoDVVuxbLRAo7JVdywxkokqfUxFJl9qwab/GcozphHuNgPPWDmT8Z3Y6m",
	"y9GobR50Po0X4/nCn8wh8KeT0dgPr9jIn43ZYsJm80V4GTbmUQiUnzfoRh9PMLMqWsApMJlHweyK+lcQ",
	"Un8az0J/MYqnfjyP43BxNblczCI3ZcM1l4KL9VtDDRpf8xBY2zRlDkIbGt05ByoL3IdBTIsUPYh98lKK",
	"mK/x+askj3bf4//J9U9v0mjyXz/vkxguogVK4nI6n7LRNIyvLmEWxPRyPJ9cBcgRHr8dS0eL+eUVHV+N",
	"xvPp4pKFdDwNZ9NoMafBfBpboy8jsYbMhyc77TdAWa/9N16aVA7ZqVVG1/ANQHccjCd+MPbH49vReBlM",
	"l6PJc7UqLMbjYOpvRsPxbDj313nhz8az4dVsGMz8ywjYdDSbts95nRc/KL5x4eA+uCLcKu2kUi9jZ8vY",
	"bKmC9+61DVeagM5beiUBKN6zIdmJ9zQiuzHEJNQQqoDgMtTwMAWy5SZxENXFAuEc6FtQG1A/IgB+GYJr",
	"u9An97MfxMs4x0jikDBKKc++Akq/EKQQ8DmHyAAjdhiRUVQoBawLz7Qz0igqNAdhyjlUsJXAkbqIIgCG",
	"aEqJAqN2Q3Idu5W4hWEE2YhqGJA8BaoRxnOpDOGGUG0DWq0LZx5Cmr/IQrAvE6+Q5lOMyxyRbStMBIb2",
	"KQsVQRMxwmeuzVeQ9TtBUauMJDEXzIrHbWV5denPN8OCS+thguV0tpzOEAsOU9vPu0wqKXhEDAflTwgu",
	"GAFqOwkp+mYuyC9o2bmU6bDCk+hyNr+CMfPjBQ396WzC/AWdUH82mlzO4sur6XjexpM7f+tShqf4jh5s",
	"PhsESsGeRoFykD2JQpTBxx/whZpHI4wzPrnw54j24V7oGtxqZULzNSy7b90qLnKElViSUE3gc46R1LDl",
	"9HSLk/28/hUIUDwqjT/DYGoNgwPslMjceOgOOwdlytz7yKoviAGloVzVlUSQMioY/lUGaD/d3t6UQyLJ",
	"YEgsAmsL3k5Ny4GvUQRjgjrE41IOAxIWDufdusAcpUif4mAwJtRWGe3i2gaVL26uNZEmARQexcWlhmpd",
	"F7K6vZBTEEXmLT/05MhtvfoUpYie3uBARwqhixwBEXCu075PVv8H9Zo23vUG+47DQJZLRRVPd58KQTeU",
	"p4g4rYn1rtWDtaLC7O1qn1VbtsEzkiJOeYTjMzCJZJ/wLU1TuT0gPQPGabVIk6J8HOxXvHqtYl8z3oMK",
	"UealphH3NqwSAbsCCv+wmtZURD54xx1sQ5YMMcDsqQH0lgNfV4B0kFUfKj2CZX99rHQ4rpx4IB4HnCdn",
	"ViXA0+zzOpc+g13dZ54VWsqjbGvrFgxk+omli1YETpWiu6Ym0UeIe3Mo47YbPLU5mjiP3pTy+7Wa1fI4",
	"j2f6b3HkvoxrAsqV+iTdmv4E1lxlo08NRJGFoPBcXt680y09wEB1DQr3dOWQvtk0k4Wwpwp5AhkomhIc",
	"jc7+1ff9q5UllVMyWueFE1BTTTm9uxtld+W92+5J2sqjXrzk8Li4T+pzXZU5U3dLxexR2U7yc8juq5t3",
	"hNn3hMeEoxGlKbrd/dOu8qZHhfzeDXxoJVaPbFyOG1QxOXF71X7ycSApiWu27BN7pQCHscPNu65P7tF1",
	"V6s7reyvbt5pUju5fkUtS32HJ49E2Je9kPtk6R8TkNt/UDJ0REzv6936z82t1o4t6mSaZqzXpXYKEj3s",
	"10Wu6iA6XYTnYWpZm3mLsQmroBUJeCq8VqQ8G2A7CzyJ+wHZJjx1ZVEXK5GICocTZYqA+RsXsY0FYSVw",
	"8wHZYrqIyW1JqnbGRQXmk6ZQArPbspwATQmIkNuEui0wWF+J0JYsbaJlZxlJGBhQGReApEXJIfEuvjeS",
	"YALCBRyeYKfydq7kMbR563KtSsTn5Fm3OHL/0Oz0x06q2fDgyH7cgNqZBMM96oIuO7A6IgHA7LnEhYiO",
	"IIqrN/YiCs0A8cSduSyc9OsfkS1J9sJEp2R5qGaYjMynBARmEqyzHIl5Cr1rtiqc+yvelA3fppNKMPaO",
	"qAFm8xQkmotYUW1UEZlC9W9RVUX313+n0S25E+Hx81bfd9JW7F1J1QS0mT2lHK4VekBu1WBomvmWTFf9",
	"cJpyHNRaDdz9dV+6V5ZfuUWDb4Xa57BcrdzLU0bX0JtK2Df/qIjWbv58vK1nP4GxTqT0iJstBx4pE58U",
	"y/74h4djDJyMEJ9YJT4zjnTa0BNGNpXvX2gI6XuaFn1aU3Z0fy5CsINJiqPxaQEDYnY5j2ia7pxPQePo",
	"ZIwlO+h9QlgJLhh8hhr98NARwezJUYPJmrf0/vtD4C9e+H+j/h8f//3Py+aX/2n48T4YzEcPrRH/8ec/",
	"9QHQsYsaPQz+XA91SS75tdDGlqNL3n/47W3V0nc1onRHUrkFZWvMJEqoohGCw6AMHTWRiiS7PAGhB0Qb",
	"qoz10yDKUhBtJuFQN2tgx+C+hmRSGzKftNZGmaUg1iZBaWX08y/2h7ecTwZexkX1c9QjjHa37kTstLz3",
	"aJq+jm2197Qb7o287vdjgr0mYZ9n7Fx2anmdNiCSEFIp1uh+H8fGvU0PseRj4wG/hizOlO2hdE544fbV",
	"q68hk1M+8GPdFzgWyLu3z3cb6gvidLf3s71Ga/oBY9cCcdQpHg1lYUr59jP7raLT1pwTN9u+001Mjku0",
	"E7Um8u7L0qrOxAm/U/clzvQoLW3pcStqPzzoCapKFa5OsIRZe7ciTcmLm+tGzRVQ5pKcLYZo+vBkThZ1",
	"OyXM1quyMiHtD+u/aLHOkE2rBTZet0idSeuJhYHP5mTp9Lxbgy1Xu68irmrakuBNT/PqCFLU42xjwaYa",
	"tBNPVspSiDsht2KvNdb+aavsDPZeu7J2v4J9CXoeDSnvD045habh2CcGwzPoQqS7FpSCcdUvZ+7e0mPU",
	"gI/DjyRHPVI/B996zqsHiPeH9CDy4IkGY23EthU1ZJv+IEdDRoXhUVWa2wu5NqsV+8/Vatj6pzes6ouN",
	"92AV402SK6grj9WW9b8VG4e23L6N8YjiOE57Q+0jSvXk8OaEOnb73+ero533FHU81tEpBP978Vhjp685",
	"06H8DOW7tfczKsXjuhPjl+H97xgw2ysMLobt1KlWgopdF6RwTAI0NUnZCHUtU8wwYm5IrGRGKL4SjNpW",
	"5krUFDixDVfCO6DdGkBUKG52b/EoyyjUNoi7repDmb7OQblYoC6vlb3dEKhCt2v72N1Ouj3GVG7tPlXj",
	"1b55KRkcPHynUm/pJcbkenlRF8KGheB3UgnfFjCGUq0vHMkXm/FFZz5GOhhh4nao90jRM9a08zqWY1+5",
	"Bj8XseyrV8iCVbfsGdeR3IDaudqjLGwpRIPa8LJ4wU2K67YSqzdu6ls3CF1855pWMBwNRzZTyUHQnHtL",
	"bzIMhhMHUomV7wXN+cVm1Am49cV99zuIh6pErC/u6y8THi6ORkFvyoIrg5gLzPicwAi5bV1LWoNcK5on",
	"mOkSexEJ87+1/ZlTZbjVhZX4kdv+/Zbu6r6Hu+3JM264vRhKDT61ubKRhGotI44Ou1ZvXUQJoXolOpum",
	"MqIpoHGVCZO7s/qdRksEtQFGwlSG6PcRzwoDBEyEJNEoqc4toZpwo4nciiaarEkoM1NuBtbCy5smTSF0",
	"4O5fVQtosLFj+86vlsTWT3WZ7rsrs47RpgyuU1QADFBWQidU1VVLkyhZrBOyTaiBDSiSQZQgqxmKrG7C",
	"uJsX1JSzKkZQ79bQ09D5BaNc5yXrMFdWxm4vbr4C8yLn70ev24r1uvvBTqlUN5VKlXrj7X38MA6CY46r",
	"HnexfwvrYeBNg9Hj83rvDD0MvNk5m566UNgGTusc+yHzw0eXO7c+bDriSJshF8c+fEKX+sjUno+ULAFf",
	"AQgu7qsvgR7qSwLi+KWEFDG+udBEVt7BnYSVZ82mUsfSMZZ3VRAGsuFK/NU2fl6+uHltTaRu8RxccUA7",
	"hTQeEG5IpGiuCean/kpQTXJQpNAFTYlPeOwSFHtlSApw/rkQbEC2ikZ3tVUL5Mj63+FK3CaFJlsg2vA0",
	"tZ0NZCqhgqVQXZF0BktTooXcxim9g6MW9goMoXU22Xtb46sZ3Jvy2H7cP7TnGOLRL3C+1CKnweTxyYef",
	"ZtiZ08dnHlxZ/X8GAo/POvxs8Fsgx9FbHy9LH+wGVKGRPumjtHVSUWdmiSLVtyrlOQBz35ygP68x6VsY",
	"2V9K/p5jW/vfelndPmNez+eD//KP/3ymUbV4+zpev1JB18Caz1Vq+yDkup5HdCKL1PZDNBfr1N5aIDBc",
	"D9E5uSdlH9RdchIRWN/GNUkx4NYkTKk2RFHGC121nGAD7i4YbcWuJAV6Zz/o4oJombmPBzDolJxpEhZr",
	"nL8S3UpbWQpxlZR/ujMfeLnUPVj00lYoCCUCts0RldJrquNdsLmR+ovRpjl6r/0p9e647ba+tr7Y/9T6",
	"4QC0zkCQgy/w/oGo9fwY4n8V774BdBxplFdO1b5/jk9t99fPcanfJHC9dtw9x6Xufcj3L4/6f9mjPjz8",
	"TwAAAP//3D+2iBFEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
