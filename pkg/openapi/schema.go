// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5L68yN3f//8AAAD//7LC/bPA+gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
