// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3MbOY74V2H1b6tmt36SLMmybPmfPU8yD9fMJN44yd7tyJeiutESxy2yl2Tb0ab8",
	"3a/46ofEllqy7DxGtXc1sZoEQRAAAZAAPwUhm6eMApUiOP8UpJjjOUjg+i8SAZVELi5fXrnf1c8RiJCT",
	"VBJGg/Pg7QyQa2j/ERPgnaAVEPU9xXIWtAKK5xCcl0AGrYDDvzPCIQrOJc+gFYhwBnOshvgLhzg4D/7f",
	"UYHekfkqjm6zCXAKEsQrPIcCs4eHVkBB3jN+uxFh224zvjnAJ0GX8Smm5D9YYbYW5wuKym3R5csafKsQ",
	"1yItF6nqISQndKrRSTn7A0K5kXq2HVJj1uCRg3oSunGYbqKYwtM027zIDtzT4JolsBFTAWHGlQBNOctS",
	"pPo0QFtDfhKkHT4/KXS2xX4j4kvQn2gG/A54A9RVsyYoG3BPgOuDAQlCfs8iAhXN+8Z8UD+FjEqg+p84",
	"TRMSahk/+kOouXwK4COepwmof85B4ghL7FEj6A74hAlA5d9XlHNb/90KJJ6K4Pz3T+57mGRCAm+TKGgF",
	"dzjJ1I+j42Fv0O2H7Xg0OmsPRmHYxpN+rz2aTEYjHIdxBGfBw41akhRChZMVt0hBPD0ZnkE/ascjPGkP",
	"To6j9ggf4/ZJ7/j0JD49G/SHE7OcjYjsJvBPTiQY0i4TwJIaxYwjTPOdq7OysMVu8ryLYAd94jWIqOZD",
	"w9ZqgOCso/8X3Kh9AGLyMTgPeqN+pzc863Q73aP+YIuFsJNoug5uP+4ED63g3xmTWOxE9DjBd4wbeoUs",
	"U33OWgFRnDbCZ+Hw+LTbHnSHJ+1BNMDtUYS77dPh6VkUD7phNIosiRrN0GB5rci5dn6SIQESmeZ6fhXt",
	"97y85YZua0X9JCzWmIAVMjRmlOpW46FnlsBnpanalA1hS9IWkogrcTpV4qSlqdcPWkFEOIR2FEKnHIQI",
	"WkHKuEaYZvOJ2rbOusY0kyxkSXAeyDANdiSzos6OpNY2iaW30hnPTWQ1Zh3DSjx1nxy7qp/MvytqzyiI",
	"y8YKoRWQOZ6C2ZIba5F85zBYbqN/WkGaTRISXl5dJAkzlNREpHiSlLamyrJuPUyreWvYUqjVOm3BYqp5",
	"x9r0ImVUGPsHPkrgFCevLB3f2I/bsJsjSXgcj/qnvWG7F0dhezA5nbRH3SG0BzF0eyeDKA6juOC0mDG9",
	"DM3mu4ynf9IJERKxGN3hhETI9XGbntkV7Na140TLghVy0A3fEj2h3ui02+722t3e2273XP/fv4JtNsWc",
	"NNPOoDMj09kc5h3c63Y7vWmn151OKpouzX7Ec5IsgvPgkkpI0H8Do+gqwZLQbI7OesPuW/TX69tFgm/h",
	"b0FL9RDB+UBpQ3EbnPe7rWCaZgpWwqYkxMkLs5H3W8Ec5owvgvPhoBXMWQSJHkRIQkOJfrvsn3SV+pwt",
	"RKlbrxXcAY2Y0r8Xv71UuDowx/2H5ivtTIu1C2wb6QW1liWBva0pRN8rsv7BZrQTMfgvHM6hE7K5ImJ1",
	"zfvd/qDdPWkf9972Bue9XnnN8XAQj/rDUft4CN324LjXb0/Ool77pB+NjqOT4WhyOinWPKOZAMUDlcDC",
	"FrzjAgGqCxwPw+7JGW6fwQS3B/HJpD3qxYN2PIzjyejs+HR0Epoud0QQRgmdXkssFX8UP0JU5jeWAhUS",
	"h7eaSgnL1DgRxDhLpKKL+uUFozGZqt9/mqXh4nv1/7PLn98k4fE/fllGcTIKR4oSp4PhIOoNJvHZKZx0",
	"Y3zaHx6fddWMhJj9AotXc+zURSvIBJhNBfdGw9Mz3D/r9YeD0Wk0wf3B5GQQjoa4OxzEOCiCFxrRs1Ev",
	"msTddhd3e+0BxGEbg3J/otPTeBgdD/oDtRY2UlPMdQu+LbMhjtazr20LFQZe7MK+B+49cO8a7t3Wn69l",
	"3cKBR85+MLyrrLYn2Ez73f5xu9tv9/tve/3z7uC8d7wra06yfr87aN/1Ov2TzrA9TbP2Sf+kc3bS6Z60",
	"T0OIBr2TQZlZ7K4YcXKn3IIgbx3Y3VC78Re9rtoFf7b/6Xe7yqPPt8BX7y9fXl5osCyW95jDe+CKMbXZ",
	"VQSpgvPAYqba3hEuM5xYAVLf3A+Kn7dQRnpZNigh3QbJGZYIc0AKDJZkkgC6J3KG5IwIlCZYxozPO0E5",
	"THPQU0+kp9ZGiypKzJ2XKETO+gM4Cwdh++Ts5Kw9mHT77dGoO2wfj7pwPDgZ9ibxsXLZEqzn2uv2Bw/1",
	"wadnVj05U9VtmuWQFX2cm3LgwT8XD95syYQNTLeKL+kiqLvowy8ohCpAT800sxGDMCFAZaewRJ5skz/V",
	"MtU9H5ycD06UTK2eyH5czBlnlIRIEuDtY6QAhkAlcDTBAiJEKPpVbdcpY0nHyWWjQ49CLm/b9yDkltIS",
	"A5YZN8EU5xHnQQoXRHoMa1rqr+dK28gX9j7s1U+kJ7fVULuGkmtVUrMQ/Ve7/iKPNX+hDLDTYQPH1IS5",
	"gaptcDQatQIhsfrY6w6HD3s9gmjKO+UzhyUQX7WpdWChnIU+54pEX9+KdDv6f0fdR54e3uwsuw1sUY8Q",
	"e0yAg7P0RRkBu3HE1twgKkfIX68RUDmP/pKY4HA6/uyn43qb0yvxKUg5ucMSLq9KwYNexxxMWtTVl0G/",
	"0z/pdobDTm80DLY9X19nP9kDdSdjX7eddJCyg5TtUcputhOzRpubbqgFLqPklnHa1qd2H0LG4cMcE/oh",
	"vZ1+YClQnJIPIZvPGf2AwxBSCVFZOH3X181dmRkWaAJAkeuGMI3QPUkSNAEUZ0lMkkT9KhY0nHFGWSaS",
	"RWdM/4dlaI4XKGVJgqSGKFjGQ9AA5owSyTgiUiBDWh1jU+RIQKGx7awmOLK3wnbb2YFzfUZFqL4o88HO",
	"P2iZLx+qFHLUmbBogWyXoLEi3WJaBi0PG7wpYxBjotbAwDc3ffREW4hxS3vTOmIgEGUSKcJgQscU56tj",
	"7h+jmEASbc1UMeMTEkVAH0f9HEwN3TMBHIUc9LkrTgSKmJ7ODN9BdRpKSkkC+sTvc6zLPRYoAkogQpMF",
	"wpmcMU6EXRV9jKiEYwIoxMqaV40U/pWGYyrZLVA3Q0Kn1TmKkKXgLpNfXF3my63JpNaaflfQZkwphCAE",
	"5osSdRCjuoveYCLg1dPNLShCqLlZdq210g+KPo/jBaPeLKX97GD5XjJkCBUmmMyfd70vKMoofEwhVLpR",
	"N0MsDDPOIaouNK60lBxTQYBK2wfTaExVS5GFIUCk1gUjDpIvOugyNpCIXlC1XCEW0EJpAlgohlCONyIS",
	"YaHzCoTIYNv1o0z+yDIaPW7RKJMfYgWmZsVKygiiYkvI9RJ8JEI+7wq+05aFYqKY0EgT3WC1LQUzaqX3",
	"P/BIKqq9VogPRn/UUFKNpbSggWa3gGfmfR8KTgeZOVjBVFYEfEyV1uqUPA7fdVtv/uFrd0q0coG1Yyzm",
	"FLjM05fqLBrLbCZ/cSkD0dn9a3u6nMPV7MUifef3gOSxvZvimGui3AA1zMqtXc91dGfhsdppC32gJ2Eu",
	"trwlHBRHb5hzvCiu//oQMV9WaVz20PbEZcoKJOEbS+rf3AAl32XzDVl7nFtdjhxXC8m3KKb7PzLmTw8w",
	"n81h8Cox7Em1N9VXB0LVUlZtrJysFhO1eU6Bm5uPflAWBy/z+hjQYLVhsr8SIdcxYHnizVmuTM1adrt2",
	"VysastwEc1BLmax2+ucM5AyM2rEYE3dmH0Gk9BNEaI7DGaFl+Z0wlgCmCqfS1XEPShy0mTVHL67eoVi3",
	"K6eKIOhMO0hfg7Mr3kKYhzMiIZQZB6+6MVfP1zPNi6t3ws8l5r66rzeeq4VXvSGdwRw4TpBqjQhFP33v",
	"h2Zv961b02maGekqrrCvH9200qMS77BLTKvpkQO3M6xnX7GZbbdlWB+vTtPsN3PZf3W0n67eVRbdu8wO",
	"wCZJWwbWHPkcRT/6fjlTwyltSGK7e68KXDUDwrfYtkWJYX+6eicQvsMk0TYVFkgAUMUESjZfX/vZr46h",
	"NE02sVGejbFmgbwrs5Sr4a01YJssz/CvIeaR+FsxUz9i7uLrxvV7bxoui4Tt72ZYEo4q7q3qWvmEphjE",
	"O1FFKTOamgnQbK7Gt/d1Wzp35cZDwqX7/WvYO3cvHdOhom9jTq/eyF7l9sp3DzK1SCyexcKxseBr5bVH",
	"ztBRuG5r7DisdzZ3KgC2IlQL3c9IYmIt5jocCjE1y2wvXClPitDY7MdjqgZvoXvl4ynn1aIqjEOLqXIC",
	"Zcap8l7tFWsortMj9HaGzRDK1RjTiQ5u6LttupdkKAIJfE4oKNTC2SryxjuRDClPy1oA1cWu3OBsSnnl",
	"k1ybm2vlq5lraoGUUv6VgVKK6SNCvTrK/NDkMtxb1XKZF3T3EnKbeKGY0so0frgDvpAzQqdqGnlDxwQU",
	"INIrH2c09O8nNsXEa/HgOTgjWTdzO4b5I9RZKH4rqpylssrIEyxgOEBAQxZBVAGHYpL4LbPSmc0yxCtb",
	"fKYo2YGwOaZQVr31fAmNORaSZ/XGn4ltmRIknmFMDG2lool3LLlxLJN04/Vuf8hNxOvrn9EtLNAUKPDq",
	"ECUduQLcpe8sA34n8sImksS7kelhDbeaLF9fqKCUk6PDTM+i2vmObmtlOo9W5wWUFcK4sHRRY8uct+jT",
	"UyPT9Xvhkyi3pXmu11HuDHJ1tdWXryA+ofHcfYFV759sCpbXeDOJWYjEiKidLEkgWqWKy97aAOTOJGW1",
	"XMzZWob5fupVBC4JrJmv8quN8u7NQrZTqyVejaVTy0ANPOJ8UWry2dae8S639+S5NRj9fbXLCnWqn2uJ",
	"835l5OX4CpZIddV+vQmjGBWuettYS9lxKGfotUqRm1aA6cLvSZjkvDUexJapeU1dCq1ZfL5Eeje4iCJ9",
	"sdHHN5dXdwOETQOvQJQAbPL9y7C2cYdKKHpmUFf0y4PIL3lTE+JGv2VC6jMrWzbi5atrd2SsdgtGkwVK",
	"2D1wfRCFwhnmOFS7SsuFLxDjaLZIZ0BFC+mbuNrYB315QM4QLjqppnnYjEZ6XInmTEg0PC7BVkZhAnQq",
	"Z4pEc/zxV/1HcD48bgVzQt2fPV9wv5RR5yFA7WHCl+wGlua0886yDMPnDM4WJgZimn4nNgWOlpPlGnOx",
	"2xUau2MWJee6COeNuRS6Ork133NLtLT6K4zzZTp2OVb5XFvLZLdjrFn0Ktm8ZT/z86daASnlO/oItAKh",
	"7vSNs0z6XYkqGNOuDorIJhTkZiimXR0Ul5DpDXDnfsz7Xy9eVSEUoe2CyHWOSk6Pr8FNKc9lvapZw25r",
	"vJPPoWT2piOWSFEnj2soszF6uvWhbyWBfNU0KCW/6guNZcKWjlcanvEZivq8daOmfiylg9ak2bqMURv9",
	"00pVXx40sTwkmQ00iVVOWM0wXR7mMlbjOH+GmgNBa0qWBhRZmjIuRSnsb0Ga2zmMAhIzliXaRCkree1K",
	"m8KFOgiW2dClspDThITEhCBnwJW1PKa+QSdYQFubyc7EFsYckjMQgObWIisNqzBCuMBWKySQYWdMPWec",
	"y2y6TLWb2vWr407z9VkV1y5mkkFzZwup1H2VsahyNszi4gnLyuy0SpdyWvRmhHOp2VsYOB+/fppv7UB1",
	"ls53ogivKxBlp6+w2m5q7ai1Hl6esN1QyZW406PjVhOGveqnmi78NZn/KxPcmcX9kDaSa/Mm/dkDhysZ",
	"hFc2Q9Fz1su4RBHEhBJ3XqRsvXskOY5t1GvJ9LVZjrXQHAj/6XCesrpVCqSawBvd07vjrmlfj6fGpMGE",
	"dW6tD4ry6u3xTQHQP2ublOsth66jBI3gLPGAAdrSCDZig2b6wKaAf71Kwc50T4qhDK0Z7TZrCJNavFWc",
	"q5R67OOi/HN+684uotuninRlMP/wbVcuk3lr2QwqGc81D1jorxX14JCTYRq0gixKPVgtLWBBh9KIFvOW",
	"IWyjNa31UH3vQnwN3qp/hvsTgrWO7EEKvk4p2OiD+wsLNDRVa6qQbLBaG0vm1yaUOwaSamDsZKiuB74l",
	"N+zKCLVMoN978R96v83P3UygIY9QufTrpvkQBkhdIBUSCOXmo9kSqteuS41hutrQu3DmW/5Eiv94ltVc",
	"nX59ragyxzKc+SO75rzV39l+XAdhiVuZ0p8O5k3trGszW4pHgL4T2yW0WJBae0qJw1mJBZBkTVIENuK7",
	"6dhy66hklRoP+gzv0nTs6RO84g+/SFx5U8PX0NQkZKPLKxe3926/eW55bWIBy+P+CBdAO5vDbA50PbHr",
	"XRG/OH/Z3oebkcsVKNLmG/Yz7TfZaTng9XSt3x4sf2ywy4pqCWsycqyBVayX/3LDFpq0WkBhC5nKzza8",
	"crIZjEe+PKUWmkC6LvfJDwjKS5rT1tGnNOcNq5rzVP266iaes4KidoPfKNWftb4wpnaD1S2KPnhBFhqo",
	"IcT63bNC1F3CmXWmwJI92TDH7KYZopu2kd1NqVWa1BpTa0xpvWV+HSZ0PpNHOLNVGAfl+A0pxwZei60Y",
	"s5WI1bopnkuPS+dj2sVIOeSXUnMj2/3XMe0qf5XfA9jfLV6Y30GNi7J1SvxqwhpQ4CS0JR3mIASeQmvl",
	"qiLDmZz1PXaoH+oFksAFWKhGchB8TDGNzGU8LWI/v317ZZuELIIO0iU4hL4raepB24avL9ToVeluoUlm",
	"rlUauGBv6Sn8OAGJ+cKV6VHAzeXxi6tLgZjNvNUZOkyAg2tKmpixqnGn5fo65bIJH8wpf9BaKYGQUXtS",
	"DqqvSQ/6YA82HUxdDyVoLVcOkTBPGcecJIsPGc1z9kod81HdD1OOqVwaVf/mhizXuQgZjRMSSp2gJ2cs",
	"+qC+6qDWCupziAh2QIpqN77gm6fowzJnvLfP1llOsznJE1coRkPYvJXXV1i5eZyUFBL8K55A8t6UJvO8",
	"vqfvmP6STcDcQU1Ua6Srl7WQXKQkxEmyMIlfivEq9RjsPY4QUzSBMSU0go+QJxAp1aK4XwsblhK4GvJ/",
	"f++2Rxftf+H2f27++vfz4q/2h87Np25r2Hsotfjb3//iTX1pTohy9bg1Xtb5pwAnyetYVzN72psTy7d+",
	"luvbea/PlR8BL2UlVYp7TSBhdCqQZA3CJ9VBV7ntZjsyb/Zjn4LCDRd3leZr8szKD53vg9LFUI8m8or1",
	"6sk1shi6vd0KuA7pJYnaN4pZcMCRyQO95+b1r5Wbfus0YKU8S+mTvezF9B9ae+BsOldLbG7z4bndi+dM",
	"5xJQCR/l2rIwe+IWr058cCUd9zaMxFOvYWnK0uy24leewpQ1jJu301aDzhsp11UqzIGM3lJ2T5fKXpb/",
	"1FtoBEufzZ518zi1zJ9LRdTmjn1a4XVT/dBUM/URV5I5VPWAqTSXgDQpX+ZGWnAeRFhCWzWvyXH1rOWe",
	"9xwPw3gU03ITj4ZqbalhtFLZtnyXdQ28HvEcU0lC57QsGRN343H0/8fjTuk/jzUYahjmKQ2ENVxZqsHr",
	"Y0ldbfB+xpBtV2FPf9Z2pWhvcza3AzRn87qAV0bJv7PNJcHmLNKuzMaZZ2nUbOYO4oaZ4+q8Lfim8/aW",
	"gyqTvIGIvdWVC5142XJKDilrc/+RCVuxz9xUrlR4GFNMF9W9QLWZAU7kzDqTxu1UZn9MJIo5myOsPtEI",
	"a3dwTHMMzLwrV5t38kkknnrv/GM+IZIrP1fiqbEPFLraCfFc/fNm0184vnIg/GeQfjdIn0CqTy5mJvF0",
	"s2FXqfp882jSbIrVKiulcfRoy1VZiTCVomvXCqT1VHTwpFp6cBXl1ylw46jkBUds3GMCmOsjvVugqFpE",
	"UctXwu71OC4oob+8YBGs/PiOJ8F5MJMyFedHeSp/pzLtDuPTI4Py0V3/qNI/aAU6YqGGU5NXGO0AU/er",
	"RLT0J5OFRGjMVqnzQtfBsPdvIyJCdgd8YaqxsEwXBBDA74hVYkQmCm4pS/SN6XptGimLvnQQfh50O71O",
	"z2Xy4ZQE58Fxp9s5NvvmTNP3CKfk6K53VHafxNGnik/48qH0hPDqNH7DFE+Vr++uD1ukRQehy7xfKWdD",
	"EDpNtNo2Jduw+8Umb5jkeRpCZ0y1AkzInEiBJgkWEnEckUy4yALcgSl0hksFiVEC+FaX4SUUCTY3hVoF",
	"wneMRAJNsqnqP6ZVE9nGURWtpyB9YUWpzZr8iWRT+VcXvsW04pcrGMzxvi7z/hPIi5S8770u0/l1hcoF",
	"rYKlp/D73W6dlOftjjyPjT+0gkGTro8r8K1H6e11FG8NVz3O8V7HWa2X/dAKTvZMsnUlmcvaVZuTfr36",
	"+42ODxRlQ2pNz6LJUVWGi8xzDaqh3NPabC4j9aK4foKQS2JypZaLQpuMo7z8AKIsWvJOrRZ4/+vFq86Y",
	"vmISjGWjE9xz7eBSNYlAurAzlckC5TFdlBalbhYthEWptBnCXMckJeiYuq5BpbZS1SUlEOrNfrUQjlcL",
	"qL25cudmaznPc712kfKVZ2YPMn6Q8cfJuI1KiqNPLj7559vw90T11sauOYnLa9UKUuaz+F9oRxthROG+",
	"lJ1Fl/IbqxroiomNKsgWUBNXDpsl20ML//csWtQLiWtCoFwR0pwmPqxotl5j+2Vx0GzfpGbbmz46+uQ4",
	"5fLlQx6t9bjyL/XvlcRG5VphuihFULAQLCQ6aqQPIohclSgD6BEydZkjvLrn9/e6WiuvCh2EaBchGnQH",
	"ex1k5VWPL9oE+RO79w7VchXGrQ38HTVB97BHHqz/z2mHbu5V7LxP4mpUtvY/d+zhq2SERn5MKcFqr45L",
	"oVorAZYtXZm8ZNMjPJkcxkFJHxyZbbXd0SdXy6+Zd7NepvboujipeuXQO/gyBznau5/x5ztQMH5HOlsQ",
	"EVYf1Hsax6OBHHcPe9zBEfn67M/N3fKt9RncF1Pd0/t4yR2JQChl0bbvtui2aK414ByobCmVosMiJm9P",
	"vzB8T+TMhkUqAc0ZiWBMTQaQLc9pLnEBDmcmM6iD0MV0ymFqswYEmmEaJe4B3BRb5WefPw4ZlZwlCfDO",
	"mF6Z121prkTNxFCIKWW6GCbQmPHQaEw7o5ZRwXZ6FzovBIehxhsnyWJMM5E/XfT9d6JcGAChF+Z3NW2l",
	"zUvo3hFsbmXpe0Mi0xesWkgwROR3YkzJXClvTKVLR1GTEEi/V1S6T6NwYRmVomWeu6WRuUSowYpaVX1h",
	"MW7nDzLZwqmWJL63Wp5Gif/DMNcumtvgelDcB8X9RQUOMul7gEmuaMkmUnaV7V3KtgwjOCGriyIcPKWD",
	"UH/uiIMbfprnzPsdsuXKEOi6WqcCh1LoJ++RfXAGxYTDPU4SLarutEeX5LaWBVLO04Rl+jg2QiyT5o9y",
	"zdNvNgC6Wh7kieKg19UF3kGNLdVJe0RMdAnSQU8d9NRueuroU4WVmkZJNwndHgOlVbG7rmJ7CJoeROwJ",
	"gqafZ49ed49ig7ztyxHeUti6h53qIEbfbnxzaWts4GK/0zmtooHE7sup3iyxT2OkHvbZg4L40k3ZI13P",
	"vLErbsuff8bNXmdD+bH6PFu+LiK/h33f1KI/yPZh8/9GNv9t41L5UxXPEpyqleJH2QL6hYe9Ba00tING",
	"OOz2+93tjz6p/+wWx6oR0ucKZpldUmN/iGsdJPDp41qf3+D1RbdqpPD57N06EewetriDgP1Zjd7Nfc2+",
	"+wxXAUvPo9epubwi/Ld87u1eH3gyl8KQeSe/wZTYf5SzYEAc1OfBQ9hSMSjXQL+s0dgJ8EvSXu1+jdm1",
	"xetg3h/E50nM+3zfW2tt+9l9fwb2Bl7vHrT/wXj+Jo1nw/G7mcCmAJXwvTygP5hn/NV+ZeqlImSqGZtc",
	"vimwKcfpjIQ4QfqV0QVK2FT/mWIu9fP/nTH9gejElnu8MG8JEPN0QMrJnEhyZ3NSiDDvkkhWVPQp6iaL",
	"LJwhLMa0MmjCQpxAq6jdKfTUvhOIg6ZMhCYJmyAW66eDMgkIZKhQwuHMlW2dYYGIFIjdU5OCGAH3FBVq",
	"6UAEfMTzNAH0OgV6LXF4qws2j6kDYLNJikonAgmmpk2nwj6tUq45ioo0lISYnEM8pmKGOUSG5kjOOMum",
	"M3Q/wxLugKM5hDM11bkiWf4Ij3mUCEvby01k/bGfKfGul3on3WzZZCd1a8f9HJrwUDpwRQUcfTL/UD/B",
	"RzOd+uodF0nC7gUyT0spRh4HrlOe/DsOtMA4RrSVzm1urlIA886Y/nNGEkAvLq5ea+EgNLaPsyyDUxIK",
	"SdxCRKKQ41QglknUHlOss/BQJjKcoDYisXmIRL+jxSiYgusZjVronuPwNpdnqmaks411DaNMoHtAQpJE",
	"DWmk02SsqRF1YFKLKk6QoOw+TvDtpnxgV+p7hTKPEbU3dpV+WF6jXUTQYfbKW5H0UAzsGykG9myWj1Mh",
	"e9NE5vVGjwJ6YXdz+zhmXs9s3W6nM1RzO8CCNlpJaZxSBXuwuaTKMsh13B6E9kc7nV1k1eL77bonB/nZ",
	"v/zoJ0/XiI/+vov0GMDNhWcfW96lmcxORfd014PsHGSnRna+7ETKxvc2dxIzT47ho46gD5cuDyG0fXmn",
	"2xy7rpOSvNEO0lGcSO4WUT7Iw0EeNsjDw8P/BQAA//8LpHi9w/UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
