// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PIkP8fDwPwEAAP//UiRzCYu+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
