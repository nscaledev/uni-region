// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"edggDw8P/xcAAP//6LGKsdD5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
