// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
