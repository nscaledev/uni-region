// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
