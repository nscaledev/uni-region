// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
