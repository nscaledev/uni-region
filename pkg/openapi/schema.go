// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
