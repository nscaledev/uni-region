// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
