// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4kRyt4jyQR4O8rBBHh4e/icAAP//qADLr3b5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
