// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//ryIlzJ/8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
