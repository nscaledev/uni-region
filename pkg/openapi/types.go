// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"time"

	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

const (
	Oauth2AuthenticationScopes = "oauth2Authentication.Scopes"
)

// Defines values for RegionType.
const (
	Openstack RegionType = "openstack"
)

// Flavor A flavor.
type Flavor struct {
	// Cpus The number of CPUs.
	Cpus int `json:"cpus"`

	// Disk The amount of ephemeral disk in GB.
	Disk int `json:"disk"`

	// Gpus The number of GPUs, if not set there are none.
	Gpus *int `json:"gpus,omitempty"`

	// Id The unique flavor ID.
	Id string `json:"id"`

	// Memory The amount of memory in GiB.
	Memory int `json:"memory"`

	// Name The flavor name.
	Name string `json:"name"`
}

// Flavors A list of flavors.
type Flavors = []Flavor

// Image An image.
type Image struct {
	// Created Time when the image was created. Images with a newer creation time should
	// be favoured over older images as they will contain updates and fewer vulnerabilities.
	Created time.Time `json:"created"`

	// Id The unique image ID.
	Id string `json:"id"`

	// Modified Time when the image was last modified.
	Modified time.Time `json:"modified"`

	// Name The image name.
	Name string `json:"name"`

	// Versions Image version metadata.
	Versions ImageVersions `json:"versions"`
}

// ImageVersions Image version metadata.
type ImageVersions struct {
	// Kubernetes The kubernetes semantic version.  This should be used directly when specifying
	// Kubernetes cluster managers and workload pools in a cluster specification.
	Kubernetes string `json:"kubernetes"`

	// NvidiaDriver The nvidia driver version.
	NvidiaDriver string `json:"nvidiaDriver"`
}

// Images A list of images that are compatible with this platform.
type Images = []Image

// KubernetesNameParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type KubernetesNameParameter = string

// RegionRead A region.
type RegionRead struct {
	// Metadata Resource metadata valid for all reads.
	Metadata externalRef0.ResourceReadMetadata `json:"metadata"`

	// Spec Information about the region.
	Spec RegionSpec `json:"spec"`
}

// RegionSpec Information about the region.
type RegionSpec struct {
	// Type The region's provider type.
	Type RegionType `json:"type"`
}

// RegionType The region's provider type.
type RegionType string

// Regions A list of regions.
type Regions = []RegionRead

// RegionIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type RegionIDParameter = KubernetesNameParameter

// FlavorsResponse A list of flavors.
type FlavorsResponse = Flavors

// ImagesResponse A list of images that are compatible with this platform.
type ImagesResponse = Images

// RegionsResponse A list of regions.
type RegionsResponse = Regions
